------- FILE ./PerroPeligro.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE ./PerroPeligro.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE ./PerroPeligro.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 dc	    ballstatus =	i
      4  10000 ????
      5  10000 ????		00 db	    counter2   =	h
      6  10000 ????
      7  10000 ????		00 da	    counter1   =	g
      8  10000 ????
      9  10000 ????		00 d9	    perrovidas =	f
     10  10000 ????
     11  10000 ????		00 d8	    perrodireccion =	e
     12  10000 ????
     13  10000 ????		00 d7	    puntos     =	d
     14  10000 ????
     15  10000 ????		00 d6	    missile1vel =	c
     16  10000 ????
     17  10000 ????		00 d5	    missile0vel =	b
     18  10000 ????
     19  10000 ????		00 d4	    perrosalto =	a
     20  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE ./PerroPeligro.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 dc	    ballstatus =	i
      4  10000 ????
      5  10000 ????		00 db	    counter2   =	h
      6  10000 ????
      7  10000 ????		00 da	    counter1   =	g
      8  10000 ????
      9  10000 ????		00 d9	    perrovidas =	f
     10  10000 ????
     11  10000 ????		00 d8	    perrodireccion =	e
     12  10000 ????
     13  10000 ????		00 d7	    puntos     =	d
     14  10000 ????
     15  10000 ????		00 d6	    missile1vel =	c
     16  10000 ????
     17  10000 ????		00 d5	    missile0vel =	b
     18  10000 ????
     19  10000 ????		00 d4	    perrosalto =	a
     20  10000 ????
------- FILE ./PerroPeligro.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 5d f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc				  -	      ifconst	pfscore
    765  f1cc				  -	      lda	pfscorecolor
    766  f1cc				  -	      sta	COLUPF
    767  f1cc					      endif
    768  f1cc		       85 02		      sta	WSYNC
    769  f1ce		       a2 00		      ldx	#0
    770  f1d0		       86 1b		      STx	GRP0
    771  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d4
    773  f1d4		       a5 9b		      lda	scorepointers+5
    774  f1d6							; ldy temp5
    775  f1d6		       95 a0		      sta	temp5,x
    776  f1d8							; sty scorepointers+5
    777  f1d8		       a9 ff		      lda	#>scoretable
    778  f1da		       85 97		      sta	scorepointers+1
    779  f1dc		       85 99		      sta	scorepointers+3
    780  f1de		       85 9b		      sta	scorepointers+5
    781  f1e0		       85 9d		      sta	temp2
    782  f1e2		       85 9f		      sta	temp4
    783  f1e4		       85 a1		      sta	temp6
    784  f1e6		       a0 07		      LDY	#7
    785  f1e8		       84 25		      STY	VDELP0
    786  f1ea		       85 10		      STA	RESP0
    787  f1ec		       85 11		      STA	RESP1
    788  f1ee
    789  f1ee
    790  f1ee		       a9 03		      LDA	#$03
    791  f1f0		       85 04		      STA	NUSIZ0
    792  f1f2		       85 05		      STA	NUSIZ1
    793  f1f4		       85 26		      STA	VDELP1
    794  f1f6		       a9 f0		      LDA	#$F0
    795  f1f8		       85 21		      STA	HMP1
    796  f1fa		       b1 96		      lda	(scorepointers),y
    797  f1fc		       85 1b		      sta	GRP0
    798  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f200		       4c 0b f2 	      jmp	beginscore
    800  f203
    801  f203
    802  f203				  -	      if	((<*)>$d4)
    803  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f203					      endif
    805  f203
    806  f203				   loop2
    807  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f207				  -	      ifconst	pfscore
    810  f207				  -	      lda.w	pfscore1
    811  f207				  -	      sta	PF1
    812  f207					      else
    813  f207				  -	      ifconst	scorefade
    814  f207				  -	      sleep	2
    815  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    818  f20b					      endif
    819  f20b					      endif
    820  f20b							; cycle 0
    821  f20b				   beginscore
    822  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f215		       9a		      txs
    828  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f218				  -	      ifconst	scorefade
    830  f218				  -	      lda	stack2
    831  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    833  f21a					      endif
    834  f21a
    835  f21a				  -	      ifconst	pfscore
    836  f21a				  -	      lda	pfscore2
    837  f21a				  -	      sta	PF1
    838  f21a					      else
    839  f21a				  -	      ifconst	scorefade
    840  f21a				  -	      sta	COLUP0
    841  f21a				  -	      sta	COLUP1
    842  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    844  f21d					      endif
    845  f21d					      endif
    846  f21d
    847  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f221		       ba		      tsx
    850  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f228		       88		      dey
    854  f229		       10 d8		      bpl	loop2	;+2 60 180
    855  f22b
    856  f22b		       a6 f6		      ldx	stack1
    857  f22d		       9a		      txs
    858  f22e							; lda scorepointers+1
    859  f22e		       a4 9c		      ldy	temp1
    860  f230							; sta temp1
    861  f230		       84 97		      sty	scorepointers+1
    862  f232
    863  f232		       a9 00		      LDA	#0
    864  f234		       85 0e		      sta	PF1
    865  f236		       85 1b		      STA	GRP0
    866  f238		       85 1c		      STA	GRP1
    867  f23a		       85 25		      STA	VDELP0
    868  f23c		       85 26		      STA	VDELP1	;do we need these
    869  f23e		       85 04		      STA	NUSIZ0
    870  f240		       85 05		      STA	NUSIZ1
    871  f242
    872  f242							; lda scorepointers+3
    873  f242		       a4 9e		      ldy	temp3
    874  f244							; sta temp3
    875  f244		       84 99		      sty	scorepointers+3
    876  f246
    877  f246							; lda scorepointers+5
    878  f246		       a4 a0		      ldy	temp5
    879  f248							; sta temp5
    880  f248		       84 9b		      sty	scorepointers+5
    881  f24a					      endif		;noscore
    882  f24a				  -	      ifconst	readpaddle
    883  f24a				  -	      lda	#%11000010
    884  f24a					      else
    885  f24a				  -	      ifconst	qtcontroller
    886  f24a				  -	      lda	qtcontroller
    887  f24a				  -	      lsr		; bit 0 in carry
    888  f24a				  -	      lda	#4
    889  f24a				  -	      ror		; carry into top of A
    890  f24a					      else
    891  f24a		       a9 02		      lda	#2
    892  f24c					      endif		; qtcontroller
    893  f24c					      endif		; readpaddle
    894  f24c		       85 02		      sta	WSYNC
    895  f24e		       85 01		      sta	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    897  f251				  -	      ifconst	shakescreen
    898  f251				  -doshakescreen
    899  f251				  -	      bit	shakescreen
    900  f251				  -	      bmi	noshakescreen
    901  f251				  -	      sta	WSYNC
    902  f251				  -noshakescreen
    903  f251				  -	      ldx	missile0height
    904  f251				  -	      inx
    905  f251				  -	      rts
    906  f251					      endif
    907  f251
    908  f251							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f251
    910  f251							; playfield drawing routines
    911  f251							; you get a 32x12 bitmapped display in a single color :)
    912  f251							; 0-31 and 0-11
    913  f251
    914  f251				   pfclear		; clears playfield - or fill with pattern
    915  f251				  -	      ifconst	pfres
    916  f251				  -	      ldx	#pfres*pfwidth-1
    917  f251					      else
    918  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f253					      endif
    920  f253				   pfclear_loop
    921  f253					      ifnconst	superchip
    922  f253		       95 a4		      sta	playfield,x
    923  f255				  -	      else
    924  f255				  -	      sta	playfield-128,x
    925  f255					      endif
    926  f255		       ca		      dex
    927  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    929  f259
    930  f259				   setuppointers
    931  f259		       86 9d		      stx	temp2	; store on.off.flip value
    932  f25b		       aa		      tax		; put x-value in x 
    933  f25c		       4a		      lsr
    934  f25d		       4a		      lsr
    935  f25e		       4a		      lsr		; divide x pos by 8 
    936  f25f		       85 9c		      sta	temp1
    937  f261		       98		      tya
    938  f262		       0a		      asl
    939  f263					      if	pfwidth=4
    940  f263		       0a		      asl		; multiply y pos by 4
    941  f264					      endif		; else multiply by 2
    942  f264		       18		      clc
    943  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f267		       a8		      tay		; put the value in y
    945  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f26a		       60		      rts
    947  f26b
    948  f26b				   pfread
    949  f26b							;x=xvalue, y=yvalue
    950  f26b		       20 59 f2 	      jsr	setuppointers
    951  f26e		       bd d3 f2 	      lda	setbyte,x
    952  f271		       39 a4 00 	      and	playfield,y
    953  f274		       5d d3 f2 	      eor	setbyte,x
    954  f277							; beq readzero
    955  f277							; lda #1
    956  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    958  f278
    959  f278				   pfpixel
    960  f278							;x=xvalue, y=yvalue, a=0,1,2
    961  f278		       20 59 f2 	      jsr	setuppointers
    962  f27b
    963  f27b				  -	      ifconst	bankswitch
    964  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f27b				  -	      beq	pixelon_r	; if "on" go to on
    966  f27b				  -	      lsr
    967  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    969  f27b				  -	      eor	setbyte,x
    970  f27b				  -	      ifconst	superchip
    971  f27b				  -	      sta	playfield-128,y
    972  f27b				  -	      else
    973  f27b				  -	      sta	playfield,y
    974  f27b				  -	      endif
    975  f27b				  -	      RETURN
    976  f27b				  -pixelon_r
    977  f27b				  -	      lda	playfield,y
    978  f27b				  -	      ora	setbyte,x
    979  f27b				  -	      ifconst	superchip
    980  f27b				  -	      sta	playfield-128,y
    981  f27b				  -	      else
    982  f27b				  -	      sta	playfield,y
    983  f27b				  -	      endif
    984  f27b				  -	      RETURN
    985  f27b				  -pixeloff_r
    986  f27b				  -	      lda	setbyte,x
    987  f27b				  -	      eor	#$ff
    988  f27b				  -	      and	playfield,y
    989  f27b				  -	      ifconst	superchip
    990  f27b				  -	      sta	playfield-128,y
    991  f27b				  -	      else
    992  f27b				  -	      sta	playfield,y
    993  f27b				  -	      endif
    994  f27b				  -	      RETURN
    995  f27b				  -
    996  f27b					      else
    997  f27b		       4c ac f2 	      jmp	plotpoint
    998  f27e					      endif
    999  f27e
   1000  f27e				   pfhline
   1001  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f27e		       20 59 f2 	      jsr	setuppointers
   1003  f281		       4c 8b f2 	      jmp	noinc
   1004  f284				   keepgoing
   1005  f284		       e8		      inx
   1006  f285		       8a		      txa
   1007  f286		       29 07		      and	#7
   1008  f288		       d0 01		      bne	noinc
   1009  f28a		       c8		      iny
   1010  f28b				   noinc
   1011  f28b		       20 ac f2 	      jsr	plotpoint
   1012  f28e		       e4 9e		      cpx	temp3
   1013  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
   1015  f293
   1016  f293				   pfvline
   1017  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f293		       20 59 f2 	      jsr	setuppointers
   1019  f296		       84 9c		      sty	temp1	; store memory location offset
   1020  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f29a		       a5 9e		      lda	temp3
   1022  f29c		       0a		      asl
   1023  f29d					      if	pfwidth=4
   1024  f29d		       0a		      asl		; multiply by 4
   1025  f29e					      endif		; else multiply by 2
   1026  f29e		       85 9e		      sta	temp3	; store it
   1027  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a0							; x should equal original x value
   1030  f2a0				   keepgoingy
   1031  f2a0		       20 ac f2 	      jsr	plotpoint
   1032  f2a3		       c8		      iny
   1033  f2a4		       c8		      iny
   1034  f2a5					      if	pfwidth=4
   1035  f2a5		       c8		      iny
   1036  f2a6		       c8		      iny
   1037  f2a7					      endif
   1038  f2a7		       c4 9e		      cpy	temp3
   1039  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1041  f2ac
   1042  f2ac				   plotpoint
   1043  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b0		       4a		      lsr
   1046  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b6		       5d d3 f2 	      eor	setbyte,x
   1049  f2b9				  -	      ifconst	superchip
   1050  f2b9				  -	      sta	playfield-128,y
   1051  f2b9					      else
   1052  f2b9		       99 a4 00 	      sta	playfield,y
   1053  f2bc					      endif
   1054  f2bc		       60		      rts
   1055  f2bd				   pixelon
   1056  f2bd		       b9 a4 00 	      lda	playfield,y
   1057  f2c0		       1d d3 f2 	      ora	setbyte,x
   1058  f2c3				  -	      ifconst	superchip
   1059  f2c3				  -	      sta	playfield-128,y
   1060  f2c3					      else
   1061  f2c3		       99 a4 00 	      sta	playfield,y
   1062  f2c6					      endif
   1063  f2c6		       60		      rts
   1064  f2c7				   pixeloff
   1065  f2c7		       bd d3 f2 	      lda	setbyte,x
   1066  f2ca		       49 ff		      eor	#$ff
   1067  f2cc		       39 a4 00 	      and	playfield,y
   1068  f2cf				  -	      ifconst	superchip
   1069  f2cf				  -	      sta	playfield-128,y
   1070  f2cf					      else
   1071  f2cf		       99 a4 00 	      sta	playfield,y
   1072  f2d2					      endif
   1073  f2d2		       60		      rts
   1074  f2d3
   1075  f2d3				   setbyte
   1076  f2d3					      ifnconst	pfcenter
   1077  f2d3		       80		      .byte.b	$80
   1078  f2d4		       40		      .byte.b	$40
   1079  f2d5		       20		      .byte.b	$20
   1080  f2d6		       10		      .byte.b	$10
   1081  f2d7		       08		      .byte.b	$08
   1082  f2d8		       04		      .byte.b	$04
   1083  f2d9		       02		      .byte.b	$02
   1084  f2da		       01		      .byte.b	$01
   1085  f2db					      endif
   1086  f2db		       01		      .byte.b	$01
   1087  f2dc		       02		      .byte.b	$02
   1088  f2dd		       04		      .byte.b	$04
   1089  f2de		       08		      .byte.b	$08
   1090  f2df		       10		      .byte.b	$10
   1091  f2e0		       20		      .byte.b	$20
   1092  f2e1		       40		      .byte.b	$40
   1093  f2e2		       80		      .byte.b	$80
   1094  f2e3		       80		      .byte.b	$80
   1095  f2e4		       40		      .byte.b	$40
   1096  f2e5		       20		      .byte.b	$20
   1097  f2e6		       10		      .byte.b	$10
   1098  f2e7		       08		      .byte.b	$08
   1099  f2e8		       04		      .byte.b	$04
   1100  f2e9		       02		      .byte.b	$02
   1101  f2ea		       01		      .byte.b	$01
   1102  f2eb		       01		      .byte.b	$01
   1103  f2ec		       02		      .byte.b	$02
   1104  f2ed		       04		      .byte.b	$04
   1105  f2ee		       08		      .byte.b	$08
   1106  f2ef		       10		      .byte.b	$10
   1107  f2f0		       20		      .byte.b	$20
   1108  f2f1		       40		      .byte.b	$40
   1109  f2f2		       80		      .byte.b	$80
   1110  f2f3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f3
   1112  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f3		       d0 13		      bne	notleft
   1114  f2f5							;left
   1115  f2f5				  -	      ifconst	pfres
   1116  f2f5				  -	      ldx	#pfres*4
   1117  f2f5					      else
   1118  f2f5		       a2 30		      ldx	#48
   1119  f2f7					      endif
   1120  f2f7				   leftloop
   1121  f2f7		       b5 a3		      lda	playfield-1,x
   1122  f2f9		       4a		      lsr
   1123  f2fa
   1124  f2fa				  -	      ifconst	superchip
   1125  f2fa				  -	      lda	playfield-2,x
   1126  f2fa				  -	      rol
   1127  f2fa				  -	      sta	playfield-130,x
   1128  f2fa				  -	      lda	playfield-3,x
   1129  f2fa				  -	      ror
   1130  f2fa				  -	      sta	playfield-131,x
   1131  f2fa				  -	      lda	playfield-4,x
   1132  f2fa				  -	      rol
   1133  f2fa				  -	      sta	playfield-132,x
   1134  f2fa				  -	      lda	playfield-1,x
   1135  f2fa				  -	      ror
   1136  f2fa				  -	      sta	playfield-129,x
   1137  f2fa					      else
   1138  f2fa		       36 a2		      rol	playfield-2,x
   1139  f2fc		       76 a1		      ror	playfield-3,x
   1140  f2fe		       36 a0		      rol	playfield-4,x
   1141  f300		       76 a3		      ror	playfield-1,x
   1142  f302					      endif
   1143  f302
   1144  f302		       8a		      txa
   1145  f303		       cb 04		      sbx	#4
   1146  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1148  f308
   1149  f308				   notleft
   1150  f308		       4a		      lsr
   1151  f309		       90 13		      bcc	notright
   1152  f30b							;right
   1153  f30b
   1154  f30b				  -	      ifconst	pfres
   1155  f30b				  -	      ldx	#pfres*4
   1156  f30b					      else
   1157  f30b		       a2 30		      ldx	#48
   1158  f30d					      endif
   1159  f30d				   rightloop
   1160  f30d		       b5 a0		      lda	playfield-4,x
   1161  f30f		       4a		      lsr
   1162  f310				  -	      ifconst	superchip
   1163  f310				  -	      lda	playfield-3,x
   1164  f310				  -	      rol
   1165  f310				  -	      sta	playfield-131,x
   1166  f310				  -	      lda	playfield-2,x
   1167  f310				  -	      ror
   1168  f310				  -	      sta	playfield-130,x
   1169  f310				  -	      lda	playfield-1,x
   1170  f310				  -	      rol
   1171  f310				  -	      sta	playfield-129,x
   1172  f310				  -	      lda	playfield-4,x
   1173  f310				  -	      ror
   1174  f310				  -	      sta	playfield-132,x
   1175  f310					      else
   1176  f310		       36 a1		      rol	playfield-3,x
   1177  f312		       76 a2		      ror	playfield-2,x
   1178  f314		       36 a3		      rol	playfield-1,x
   1179  f316		       76 a0		      ror	playfield-4,x
   1180  f318					      endif
   1181  f318		       8a		      txa
   1182  f319		       cb 04		      sbx	#4
   1183  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1185  f31e
   1186  f31e				   notright
   1187  f31e		       4a		      lsr
   1188  f31f		       90 49		      bcc	notup
   1189  f321							;up
   1190  f321		       4a		      lsr
   1191  f322		       90 02		      bcc	onedecup
   1192  f324		       c6 ef		      dec	playfieldpos
   1193  f326				   onedecup
   1194  f326		       c6 ef		      dec	playfieldpos
   1195  f328		       f0 02		      beq	shiftdown
   1196  f32a		       10 3d		      bpl	noshiftdown2
   1197  f32c				   shiftdown
   1198  f32c				  -	      ifconst	pfrowheight
   1199  f32c				  -	      lda	#pfrowheight
   1200  f32c					      else
   1201  f32c					      ifnconst	pfres
   1202  f32c		       a9 08		      lda	#8
   1203  f32e				  -	      else
   1204  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f32e					      endif
   1206  f32e					      endif
   1207  f32e
   1208  f32e		       85 ef		      sta	playfieldpos
   1209  f330		       a5 a7		      lda	playfield+3
   1210  f332		       85 9f		      sta	temp4
   1211  f334		       a5 a6		      lda	playfield+2
   1212  f336		       85 9e		      sta	temp3
   1213  f338		       a5 a5		      lda	playfield+1
   1214  f33a		       85 9d		      sta	temp2
   1215  f33c		       a5 a4		      lda	playfield
   1216  f33e		       85 9c		      sta	temp1
   1217  f340		       a2 00		      ldx	#0
   1218  f342				   up2
   1219  f342		       b5 a8		      lda	playfield+4,x
   1220  f344				  -	      ifconst	superchip
   1221  f344				  -	      sta	playfield-128,x
   1222  f344				  -	      lda	playfield+5,x
   1223  f344				  -	      sta	playfield-127,x
   1224  f344				  -	      lda	playfield+6,x
   1225  f344				  -	      sta	playfield-126,x
   1226  f344				  -	      lda	playfield+7,x
   1227  f344				  -	      sta	playfield-125,x
   1228  f344					      else
   1229  f344		       95 a4		      sta	playfield,x
   1230  f346		       b5 a9		      lda	playfield+5,x
   1231  f348		       95 a5		      sta	playfield+1,x
   1232  f34a		       b5 aa		      lda	playfield+6,x
   1233  f34c		       95 a6		      sta	playfield+2,x
   1234  f34e		       b5 ab		      lda	playfield+7,x
   1235  f350		       95 a7		      sta	playfield+3,x
   1236  f352					      endif
   1237  f352		       8a		      txa
   1238  f353		       cb fc		      sbx	#252
   1239  f355				  -	      ifconst	pfres
   1240  f355				  -	      cpx	#(pfres-1)*4
   1241  f355					      else
   1242  f355		       e0 2c		      cpx	#44
   1243  f357					      endif
   1244  f357		       d0 e9		      bne	up2
   1245  f359
   1246  f359		       a5 9f		      lda	temp4
   1247  f35b
   1248  f35b				  -	      ifconst	superchip
   1249  f35b				  -	      ifconst	pfres
   1250  f35b				  -	      sta	playfield+pfres*4-129
   1251  f35b				  -	      lda	temp3
   1252  f35b				  -	      sta	playfield+pfres*4-130
   1253  f35b				  -	      lda	temp2
   1254  f35b				  -	      sta	playfield+pfres*4-131
   1255  f35b				  -	      lda	temp1
   1256  f35b				  -	      sta	playfield+pfres*4-132
   1257  f35b				  -	      else
   1258  f35b				  -	      sta	playfield+47-128
   1259  f35b				  -	      lda	temp3
   1260  f35b				  -	      sta	playfield+46-128
   1261  f35b				  -	      lda	temp2
   1262  f35b				  -	      sta	playfield+45-128
   1263  f35b				  -	      lda	temp1
   1264  f35b				  -	      sta	playfield+44-128
   1265  f35b				  -	      endif
   1266  f35b					      else
   1267  f35b				  -	      ifconst	pfres
   1268  f35b				  -	      sta	playfield+pfres*4-1
   1269  f35b				  -	      lda	temp3
   1270  f35b				  -	      sta	playfield+pfres*4-2
   1271  f35b				  -	      lda	temp2
   1272  f35b				  -	      sta	playfield+pfres*4-3
   1273  f35b				  -	      lda	temp1
   1274  f35b				  -	      sta	playfield+pfres*4-4
   1275  f35b					      else
   1276  f35b		       85 d3		      sta	playfield+47
   1277  f35d		       a5 9e		      lda	temp3
   1278  f35f		       85 d2		      sta	playfield+46
   1279  f361		       a5 9d		      lda	temp2
   1280  f363		       85 d1		      sta	playfield+45
   1281  f365		       a5 9c		      lda	temp1
   1282  f367		       85 d0		      sta	playfield+44
   1283  f369					      endif
   1284  f369					      endif
   1285  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1287  f36a
   1288  f36a
   1289  f36a				   notup
   1290  f36a							;down
   1291  f36a		       4a		      lsr
   1292  f36b		       b0 02		      bcs	oneincup
   1293  f36d		       e6 ef		      inc	playfieldpos
   1294  f36f				   oneincup
   1295  f36f		       e6 ef		      inc	playfieldpos
   1296  f371		       a5 ef		      lda	playfieldpos
   1297  f373
   1298  f373				  -	      ifconst	pfrowheight
   1299  f373				  -	      cmp	#pfrowheight+1
   1300  f373					      else
   1301  f373					      ifnconst	pfres
   1302  f373		       c9 09		      cmp	#9
   1303  f375				  -	      else
   1304  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f375					      endif
   1306  f375					      endif
   1307  f375
   1308  f375		       90 3b		      bcc	noshiftdown
   1309  f377		       a9 01		      lda	#1
   1310  f379		       85 ef		      sta	playfieldpos
   1311  f37b
   1312  f37b				  -	      ifconst	pfres
   1313  f37b				  -	      lda	playfield+pfres*4-1
   1314  f37b				  -	      sta	temp4
   1315  f37b				  -	      lda	playfield+pfres*4-2
   1316  f37b				  -	      sta	temp3
   1317  f37b				  -	      lda	playfield+pfres*4-3
   1318  f37b				  -	      sta	temp2
   1319  f37b				  -	      lda	playfield+pfres*4-4
   1320  f37b					      else
   1321  f37b		       a5 d3		      lda	playfield+47
   1322  f37d		       85 9f		      sta	temp4
   1323  f37f		       a5 d2		      lda	playfield+46
   1324  f381		       85 9e		      sta	temp3
   1325  f383		       a5 d1		      lda	playfield+45
   1326  f385		       85 9d		      sta	temp2
   1327  f387		       a5 d0		      lda	playfield+44
   1328  f389					      endif
   1329  f389
   1330  f389		       85 9c		      sta	temp1
   1331  f38b
   1332  f38b				  -	      ifconst	pfres
   1333  f38b				  -	      ldx	#(pfres-1)*4
   1334  f38b					      else
   1335  f38b		       a2 2c		      ldx	#44
   1336  f38d					      endif
   1337  f38d				   down2
   1338  f38d		       b5 a3		      lda	playfield-1,x
   1339  f38f				  -	      ifconst	superchip
   1340  f38f				  -	      sta	playfield-125,x
   1341  f38f				  -	      lda	playfield-2,x
   1342  f38f				  -	      sta	playfield-126,x
   1343  f38f				  -	      lda	playfield-3,x
   1344  f38f				  -	      sta	playfield-127,x
   1345  f38f				  -	      lda	playfield-4,x
   1346  f38f				  -	      sta	playfield-128,x
   1347  f38f					      else
   1348  f38f		       95 a7		      sta	playfield+3,x
   1349  f391		       b5 a2		      lda	playfield-2,x
   1350  f393		       95 a6		      sta	playfield+2,x
   1351  f395		       b5 a1		      lda	playfield-3,x
   1352  f397		       95 a5		      sta	playfield+1,x
   1353  f399		       b5 a0		      lda	playfield-4,x
   1354  f39b		       95 a4		      sta	playfield,x
   1355  f39d					      endif
   1356  f39d		       8a		      txa
   1357  f39e		       cb 04		      sbx	#4
   1358  f3a0		       d0 eb		      bne	down2
   1359  f3a2
   1360  f3a2		       a5 9f		      lda	temp4
   1361  f3a4				  -	      ifconst	superchip
   1362  f3a4				  -	      sta	playfield-125
   1363  f3a4				  -	      lda	temp3
   1364  f3a4				  -	      sta	playfield-126
   1365  f3a4				  -	      lda	temp2
   1366  f3a4				  -	      sta	playfield-127
   1367  f3a4				  -	      lda	temp1
   1368  f3a4				  -	      sta	playfield-128
   1369  f3a4					      else
   1370  f3a4		       85 a7		      sta	playfield+3
   1371  f3a6		       a5 9e		      lda	temp3
   1372  f3a8		       85 a6		      sta	playfield+2
   1373  f3aa		       a5 9d		      lda	temp2
   1374  f3ac		       85 a5		      sta	playfield+1
   1375  f3ae		       a5 9c		      lda	temp1
   1376  f3b0		       85 a4		      sta	playfield
   1377  f3b2					      endif
   1378  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1380  f3b3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b3
   1382  f3b3							;standard routines needed for pretty much all games
   1383  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b3							; repositioning code and score pointer setup moved to overscan
   1385  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b3
   1387  f3b3				   randomize
   1388  f3b3		       a5 a2		      lda	rand
   1389  f3b5		       4a		      lsr
   1390  f3b6				  -	      ifconst	rand16
   1391  f3b6				  -	      rol	rand16
   1392  f3b6					      endif
   1393  f3b6		       90 02		      bcc	noeor
   1394  f3b8		       49 b4		      eor	#$B4
   1395  f3ba				   noeor
   1396  f3ba		       85 a2		      sta	rand
   1397  f3bc				  -	      ifconst	rand16
   1398  f3bc				  -	      eor	rand16
   1399  f3bc					      endif
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1401  f3bd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3bd
   1403  f3bd				   drawscreen
   1404  f3bd				  -	      ifconst	debugscore
   1405  f3bd				  -	      ldx	#14
   1406  f3bd				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3bd				  -
   1408  f3bd				  -	      ifconst	mincycles
   1409  f3bd				  -	      lda	mincycles
   1410  f3bd				  -	      cmp	INTIM
   1411  f3bd				  -	      lda	mincycles
   1412  f3bd				  -	      bcc	nochange
   1413  f3bd				  -	      lda	INTIM
   1414  f3bd				  -	      sta	mincycles
   1415  f3bd				  -nochange
   1416  f3bd				  -	      endif
   1417  f3bd				  -
   1418  f3bd				  -			; cmp #$2B
   1419  f3bd				  -			; bcs no_cycles_left
   1420  f3bd				  -	      bmi	cycles_left
   1421  f3bd				  -	      ldx	#64
   1422  f3bd				  -	      eor	#$ff	;make negative
   1423  f3bd				  -cycles_left
   1424  f3bd				  -	      stx	scorecolor
   1425  f3bd				  -	      and	#$7f	; clear sign bit
   1426  f3bd				  -	      tax
   1427  f3bd				  -	      lda	scorebcd,x
   1428  f3bd				  -	      sta	score+2
   1429  f3bd				  -	      lda	scorebcd1,x
   1430  f3bd				  -	      sta	score+1
   1431  f3bd				  -	      jmp	done_debugscore
   1432  f3bd				  -scorebcd
   1433  f3bd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3bd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3bd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3bd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3bd				  -scorebcd1
   1438  f3bd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3bd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3bd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3bd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3bd				  -done_debugscore
   1443  f3bd					      endif
   1444  f3bd
   1445  f3bd				  -	      ifconst	debugcycles
   1446  f3bd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3bd				  -			; cmp #$2B
   1448  f3bd				  -			; BCC overscan
   1449  f3bd				  -	      bmi	overscan
   1450  f3bd				  -	      sta	COLUBK
   1451  f3bd				  -	      bcs	doneoverscan
   1452  f3bd					      endif
   1453  f3bd
   1454  f3bd				   overscan
   1455  f3bd				  -	      ifconst	interlaced
   1456  f3bd				  -	      PHP
   1457  f3bd				  -	      PLA
   1458  f3bd				  -	      EOR	#4	; flip interrupt bit
   1459  f3bd				  -	      PHA
   1460  f3bd				  -	      PLP
   1461  f3bd				  -	      AND	#4	; isolate the interrupt bit
   1462  f3bd				  -	      TAX		; save it for later
   1463  f3bd					      endif
   1464  f3bd
   1465  f3bd				   overscanloop
   1466  f3bd		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c0		       30 fb		      bmi	overscanloop
   1468  f3c2				   doneoverscan
   1469  f3c2
   1470  f3c2							;do VSYNC
   1471  f3c2
   1472  f3c2				  -	      ifconst	interlaced
   1473  f3c2				  -	      CPX	#4
   1474  f3c2				  -	      BNE	oddframevsync
   1475  f3c2					      endif
   1476  f3c2
   1477  f3c2		       a9 02		      lda	#2
   1478  f3c4		       85 02		      sta	WSYNC
   1479  f3c6		       85 00		      sta	VSYNC
   1480  f3c8		       85 02		      STA	WSYNC
   1481  f3ca		       85 02		      STA	WSYNC
   1482  f3cc		       4a		      lsr
   1483  f3cd		       85 02		      STA	WSYNC
   1484  f3cf		       85 00		      STA	VSYNC
   1485  f3d1		       85 01		      sta	VBLANK
   1486  f3d3					      ifnconst	overscan_time
   1487  f3d3		       a9 a5		      lda	#37+128
   1488  f3d5				  -	      else
   1489  f3d5				  -	      lda	#overscan_time+128
   1490  f3d5					      endif
   1491  f3d5		       8d 96 02 	      sta	TIM64T
   1492  f3d8
   1493  f3d8				  -	      ifconst	interlaced
   1494  f3d8				  -	      jmp	postsync
   1495  f3d8				  -
   1496  f3d8				  -oddframevsync
   1497  f3d8				  -	      sta	WSYNC
   1498  f3d8				  -
   1499  f3d8				  -	      LDA	($80,X)	; 11 waste
   1500  f3d8				  -	      LDA	($80,X)	; 11 waste
   1501  f3d8				  -	      LDA	($80,X)	; 11 waste
   1502  f3d8				  -
   1503  f3d8				  -	      lda	#2
   1504  f3d8				  -	      sta	VSYNC
   1505  f3d8				  -	      sta	WSYNC
   1506  f3d8				  -	      sta	WSYNC
   1507  f3d8				  -	      sta	WSYNC
   1508  f3d8				  -
   1509  f3d8				  -	      LDA	($80,X)	; 11 waste
   1510  f3d8				  -	      LDA	($80,X)	; 11 waste
   1511  f3d8				  -	      LDA	($80,X)	; 11 waste
   1512  f3d8				  -
   1513  f3d8				  -	      lda	#0
   1514  f3d8				  -	      sta	VSYNC
   1515  f3d8				  -	      sta	VBLANK
   1516  f3d8				  -	      ifnconst	overscan_time
   1517  f3d8				  -	      lda	#37+128
   1518  f3d8				  -	      else
   1519  f3d8				  -	      lda	#overscan_time+128
   1520  f3d8				  -	      endif
   1521  f3d8				  -	      sta	TIM64T
   1522  f3d8				  -
   1523  f3d8				  -postsync
   1524  f3d8					      endif
   1525  f3d8
   1526  f3d8				  -	      ifconst	legacy
   1527  f3d8				  -	      if	legacy < 100
   1528  f3d8				  -	      ldx	#4
   1529  f3d8				  -adjustloop
   1530  f3d8				  -	      lda	player0x,x
   1531  f3d8				  -	      sec
   1532  f3d8				  -	      sbc	#14	;?
   1533  f3d8				  -	      sta	player0x,x
   1534  f3d8				  -	      dex
   1535  f3d8				  -	      bpl	adjustloop
   1536  f3d8				  -	      endif
   1537  f3d8					      endif
   1538  f3d8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3d8				  -	      repeat	($fa-(<*))
   1540  f3d8				  -	      nop
   1541  f3d8				  -	      repend
   1542  f3d8					      endif
   1543  f3d8		       85 02		      sta	WSYNC
   1544  f3da		       a2 04		      ldx	#4
      0  f3dc					      SLEEP	3
      1  f3dc				   .CYCLES    SET	3
      2  f3dc
      3  f3dc				  -	      IF	.CYCLES < 2
      4  f3dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3dc				  -	      ERR
      6  f3dc					      ENDIF
      7  f3dc
      8  f3dc					      IF	.CYCLES & 1
      9  f3dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3dc		       04 00		      nop	0
     11  f3de				  -	      ELSE
     12  f3de				  -	      bit	VSYNC
     13  f3de					      ENDIF
     14  f3de				   .CYCLES    SET	.CYCLES - 3
     15  f3de					      ENDIF
     16  f3de
     17  f3de				  -	      REPEAT	.CYCLES / 2
     18  f3de				  -	      nop
     19  f3de					      REPEND
   1546  f3de				   HorPosLoop		; 5
   1547  f3de		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e0		       38		      sec		;+2 11
   1549  f3e1				   DivideLoop
   1550  f3e1		       e9 0f		      sbc	#15
   1551  f3e3		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e5		       95 9c		      sta	temp1,X	;+4 19
   1553  f3e7		       95 10		      sta	RESP0,X	;+4 23
   1554  f3e9		       85 02		      sta	WSYNC
   1555  f3eb		       ca		      dex
   1556  f3ec		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3ee							; 4
   1558  f3ee
   1559  f3ee		       a2 04		      ldx	#4
   1560  f3f0		       b4 9c		      ldy	temp1,X
   1561  f3f2		       b9 4e f3 	      lda	repostable-256,Y
   1562  f3f5		       95 20		      sta	HMP0,X	;+14 18
   1563  f3f7
   1564  f3f7		       ca		      dex
   1565  f3f8		       b4 9c		      ldy	temp1,X
   1566  f3fa		       b9 4e f3 	      lda	repostable-256,Y
   1567  f3fd		       95 20		      sta	HMP0,X	;+14 32
   1568  f3ff
   1569  f3ff		       ca		      dex
   1570  f400		       b4 9c		      ldy	temp1,X
   1571  f402		       b9 4e f3 	      lda	repostable-256,Y
   1572  f405		       95 20		      sta	HMP0,X	;+14 46
   1573  f407
   1574  f407		       ca		      dex
   1575  f408		       b4 9c		      ldy	temp1,X
   1576  f40a		       b9 4e f3 	      lda	repostable-256,Y
   1577  f40d		       95 20		      sta	HMP0,X	;+14 60
   1578  f40f
   1579  f40f		       ca		      dex
   1580  f410		       b4 9c		      ldy	temp1,X
   1581  f412		       b9 4e f3 	      lda	repostable-256,Y
   1582  f415		       95 20		      sta	HMP0,X	;+14 74
   1583  f417
   1584  f417		       85 02		      sta	WSYNC
   1585  f419
   1586  f419		       85 2a		      sta	HMOVE	;+3 3
   1587  f41b
   1588  f41b
   1589  f41b				  -	      ifconst	legacy
   1590  f41b				  -	      if	legacy < 100
   1591  f41b				  -	      ldx	#4
   1592  f41b				  -adjustloop2
   1593  f41b				  -	      lda	player0x,x
   1594  f41b				  -	      clc
   1595  f41b				  -	      adc	#14	;?
   1596  f41b				  -	      sta	player0x,x
   1597  f41b				  -	      dex
   1598  f41b				  -	      bpl	adjustloop2
   1599  f41b				  -	      endif
   1600  f41b					      endif
   1601  f41b
   1602  f41b
   1603  f41b
   1604  f41b
   1605  f41b							;set score pointers
   1606  f41b		       a7 95		      lax	score+2
   1607  f41d		       20 4e f4 	      jsr	scorepointerset
   1608  f420		       84 9b		      sty	scorepointers+5
   1609  f422		       86 98		      stx	scorepointers+2
   1610  f424		       a7 94		      lax	score+1
   1611  f426		       20 4e f4 	      jsr	scorepointerset
   1612  f429		       84 9a		      sty	scorepointers+4
   1613  f42b		       86 97		      stx	scorepointers+1
   1614  f42d		       a7 93		      lax	score
   1615  f42f		       20 4e f4 	      jsr	scorepointerset
   1616  f432		       84 99		      sty	scorepointers+3
   1617  f434		       86 96		      stx	scorepointers
   1618  f436
   1619  f436				   vblk
   1620  f436							; run possible vblank bB code
   1621  f436				  -	      ifconst	vblank_bB_code
   1622  f436				  -	      jsr	vblank_bB_code
   1623  f436					      endif
   1624  f436				   vblk2
   1625  f436		       ad 84 02 	      LDA	INTIM
   1626  f439		       30 fb		      bmi	vblk2
   1627  f43b		       4c 34 f0 	      jmp	kernel
   1628  f43e
   1629  f43e
   1630  f43e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f447		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f44e				   repostable
   1633  f44e
   1634  f44e				   scorepointerset
   1635  f44e		       29 0f		      and	#$0F
   1636  f450		       0a		      asl
   1637  f451		       0a		      asl
   1638  f452		       0a		      asl
   1639  f453		       69 9c		      adc	#<scoretable
   1640  f455		       a8		      tay
   1641  f456		       8a		      txa
   1642  f457							; and #$F0
   1643  f457							; lsr
   1644  f457		       4b f0		      asr	#$F0
   1645  f459		       69 9c		      adc	#<scoretable
   1646  f45b		       aa		      tax
   1647  f45c		       60		      rts
   1648  f45d				   game
   1649  f45d				   .L00 		;  rem DiscDog
   1650  f45d
   1651  f45d				   .
   1652  f45d							;
   1653  f45d
   1654  f45d				   .L01 		;  playfield:
   1655  f45d
   1656  f45d				  -	      ifconst	pfres
   1657  f45d				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1658  f45d					      else
   1659  f45d		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1660  f45f					      endif
   1661  f45f		       4c 8e f4 	      jmp	pflabel0
   1662  f462				   PF_data0
   1663  f462		       00 00		      .byte.b	%00000000, %00000000
   1664  f464					      if	(pfwidth>2)
   1665  f464		       00 00		      .byte.b	%00000000, %00000000
   1666  f466					      endif
   1667  f466		       54 00		      .byte.b	%01010100, %00000000
   1668  f468					      if	(pfwidth>2)
   1669  f468		       00 00		      .byte.b	%00000000, %00000000
   1670  f46a					      endif
   1671  f46a		       00 00		      .byte.b	%00000000, %00000000
   1672  f46c					      if	(pfwidth>2)
   1673  f46c		       00 00		      .byte.b	%00000000, %00000000
   1674  f46e					      endif
   1675  f46e		       00 00		      .byte.b	%00000000, %00000000
   1676  f470					      if	(pfwidth>2)
   1677  f470		       00 00		      .byte.b	%00000000, %00000000
   1678  f472					      endif
   1679  f472		       00 00		      .byte.b	%00000000, %00000000
   1680  f474					      if	(pfwidth>2)
   1681  f474		       00 00		      .byte.b	%00000000, %00000000
   1682  f476					      endif
   1683  f476		       00 00		      .byte.b	%00000000, %00000000
   1684  f478					      if	(pfwidth>2)
   1685  f478		       00 00		      .byte.b	%00000000, %00000000
   1686  f47a					      endif
   1687  f47a		       00 00		      .byte.b	%00000000, %00000000
   1688  f47c					      if	(pfwidth>2)
   1689  f47c		       00 00		      .byte.b	%00000000, %00000000
   1690  f47e					      endif
   1691  f47e		       00 00		      .byte.b	%00000000, %00000000
   1692  f480					      if	(pfwidth>2)
   1693  f480		       00 00		      .byte.b	%00000000, %00000000
   1694  f482					      endif
   1695  f482		       00 00		      .byte.b	%00000000, %00000000
   1696  f484					      if	(pfwidth>2)
   1697  f484		       00 00		      .byte.b	%00000000, %00000000
   1698  f486					      endif
   1699  f486		       00 00		      .byte.b	%00000000, %00000000
   1700  f488					      if	(pfwidth>2)
   1701  f488		       00 00		      .byte.b	%00000000, %00000000
   1702  f48a					      endif
   1703  f48a		       00 00		      .byte.b	%00000000, %00000000
   1704  f48c					      if	(pfwidth>2)
   1705  f48c		       00 00		      .byte.b	%00000000, %00000000
   1706  f48e					      endif
   1707  f48e				   pflabel0
   1708  f48e		       bd 62 f4 	      lda	PF_data0,x
   1709  f491		       95 a4		      sta	playfield,x
   1710  f493		       ca		      dex
   1711  f494		       10 f8		      bpl	pflabel0
   1712  f496				   .
   1713  f496							;
   1714  f496
   1715  f496				   .L02 		;  player0:
   1716  f496
   1717  f496		       a2 2c		      LDX	#<playerL02_0
   1718  f498		       86 8a		      STX	player0pointerlo
   1719  f49a		       a9 fb		      LDA	#>playerL02_0
   1720  f49c		       85 8b		      STA	player0pointerhi
   1721  f49e		       a9 07		      LDA	#7
   1722  f4a0		       85 8e		      STA	player0height
   1723  f4a2				   .
   1724  f4a2							;
   1725  f4a2
   1726  f4a2				   .L03 		;  COLUPF  =  176
   1727  f4a2
   1728  f4a2		       a9 b0		      LDA	#176
   1729  f4a4		       85 08		      STA	COLUPF
   1730  f4a6				   .L04 		;  scorecolor	=  52
   1731  f4a6
   1732  f4a6		       a9 34		      LDA	#52
   1733  f4a8		       85 a3		      STA	scorecolor
   1734  f4aa				   .L05 		;  score  =  0
   1735  f4aa
   1736  f4aa		       a9 00		      LDA	#$00
   1737  f4ac		       85 95		      STA	score+2
   1738  f4ae		       a9 00		      LDA	#$00
   1739  f4b0		       85 94		      STA	score+1
   1740  f4b2		       a9 00		      LDA	#$00
   1741  f4b4		       85 93		      STA	score
   1742  f4b6				   .
   1743  f4b6							;
   1744  f4b6
   1745  f4b6				   .L06 		;  player0x  =  52
   1746  f4b6
   1747  f4b6		       a9 34		      LDA	#52
   1748  f4b8		       85 80		      STA	player0x
   1749  f4ba				   .L07 		;  player0y  =   - 16
   1750  f4ba
   1751  f4ba		       a9 f0		      LDA	#240
   1752  f4bc		       85 85		      STA	player0y
   1753  f4be				   .
   1754  f4be							;
   1755  f4be
   1756  f4be				   .L08 		;  missile0x  =  52
   1757  f4be
   1758  f4be		       a9 34		      LDA	#52
   1759  f4c0		       85 82		      STA	missile0x
   1760  f4c2				   .L09 		;  missile0y  =  0
   1761  f4c2
   1762  f4c2		       a9 00		      LDA	#0
   1763  f4c4		       85 91		      STA	missile0y
   1764  f4c6				   .L010		;  missile0height  =  16
   1765  f4c6
   1766  f4c6		       a9 10		      LDA	#16
   1767  f4c8		       85 90		      STA	missile0height
   1768  f4ca				   .
   1769  f4ca							;
   1770  f4ca
   1771  f4ca				   .L011		;  missile1x  =  92
   1772  f4ca
   1773  f4ca		       a9 5c		      LDA	#92
   1774  f4cc		       85 83		      STA	missile1x
   1775  f4ce				   .L012		;  missile1y  =  0
   1776  f4ce
   1777  f4ce		       a9 00		      LDA	#0
   1778  f4d0		       85 88		      STA	missile1y
   1779  f4d2				   .L013		;  missile1height  =  16
   1780  f4d2
   1781  f4d2		       a9 10		      LDA	#16
   1782  f4d4		       85 87		      STA	missile1height
   1783  f4d6				   .
   1784  f4d6							;
   1785  f4d6
   1786  f4d6				   .L014		;  ballx  =  80
   1787  f4d6
   1788  f4d6		       a9 50		      LDA	#80
   1789  f4d8		       85 84		      STA	ballx
   1790  f4da				   .L015		;  bally  =  50
   1791  f4da
   1792  f4da		       a9 32		      LDA	#50
   1793  f4dc		       85 89		      STA	bally
   1794  f4de				   .L016		;  ballheight	=  4
   1795  f4de
   1796  f4de		       a9 04		      LDA	#4
   1797  f4e0		       85 92		      STA	ballheight
   1798  f4e2				   .L017		;  CTRLPF  =  $21
   1799  f4e2
   1800  f4e2		       a9 21		      LDA	#$21
   1801  f4e4		       85 0a		      STA	CTRLPF
   1802  f4e6				   .
   1803  f4e6							;
   1804  f4e6
   1805  f4e6				   .
   1806  f4e6							;
   1807  f4e6
   1808  f4e6				   .L018		;  dim perrosalto  =  a
   1809  f4e6
   1810  f4e6				   .L019		;  dim missile0vel  =	b
   1811  f4e6
   1812  f4e6				   .L020		;  dim missile1vel  =	c
   1813  f4e6
   1814  f4e6				   .L021		;  dim puntos	=  d
   1815  f4e6
   1816  f4e6				   .L022		;  dim perrodireccion	=  e
   1817  f4e6
   1818  f4e6				   .L023		;  dim perrovidas  =  f
   1819  f4e6
   1820  f4e6				   .L024		;  dim counter1  =  g
   1821  f4e6
   1822  f4e6				   .L025		;  dim counter2  =  h
   1823  f4e6
   1824  f4e6				   .L026		;  dim ballstatus  =  i
   1825  f4e6
   1826  f4e6				   .
   1827  f4e6							;
   1828  f4e6
   1829  f4e6				   .
   1830  f4e6							;
   1831  f4e6
   1832  f4e6				   .L027		;  puntos  =  0
   1833  f4e6
   1834  f4e6		       a9 00		      LDA	#0
   1835  f4e8		       85 d7		      STA	puntos
   1836  f4ea				   .L028		;  perrodireccion  =  1
   1837  f4ea
   1838  f4ea		       a9 01		      LDA	#1
   1839  f4ec		       85 d8		      STA	perrodireccion
   1840  f4ee				   .L029		;  perrovidas	=  3
   1841  f4ee
   1842  f4ee		       a9 03		      LDA	#3
   1843  f4f0		       85 d9		      STA	perrovidas
   1844  f4f2				   .L030		;  missile0vel  =  5
   1845  f4f2
   1846  f4f2		       a9 05		      LDA	#5
   1847  f4f4		       85 d5		      STA	missile0vel
   1848  f4f6				   .L031		;  missile1vel  =  3
   1849  f4f6
   1850  f4f6		       a9 03		      LDA	#3
   1851  f4f8		       85 d6		      STA	missile1vel
   1852  f4fa				   .L032		;  counter1  =  0
   1853  f4fa
   1854  f4fa		       a9 00		      LDA	#0
   1855  f4fc		       85 da		      STA	counter1
   1856  f4fe				   .L033		;  counter2  =  0
   1857  f4fe
   1858  f4fe		       a9 00		      LDA	#0
   1859  f500		       85 db		      STA	counter2
   1860  f502				   .L034		;  ballstatus	=  0
   1861  f502
   1862  f502		       a9 00		      LDA	#0
   1863  f504		       85 dc		      STA	ballstatus
   1864  f506				   .
   1865  f506							;
   1866  f506
   1867  f506				   .
   1868  f506							;
   1869  f506
   1870  f506				   .mainloop
   1871  f506							; mainloop
   1872  f506
   1873  f506				   .
   1874  f506							;
   1875  f506
   1876  f506				   .L035		;  AUDV0  =  0
   1877  f506
   1878  f506		       a9 00		      LDA	#0
   1879  f508		       85 19		      STA	AUDV0
   1880  f50a				   .L036		;  COLUP0  =  4
   1881  f50a
   1882  f50a		       a9 04		      LDA	#4
   1883  f50c		       85 06		      STA	COLUP0
   1884  f50e				   .L037		;  COLUP1  =  132
   1885  f50e
   1886  f50e		       a9 84		      LDA	#132
   1887  f510		       85 07		      STA	COLUP1
   1888  f512				   .
   1889  f512							;
   1890  f512
   1891  f512				   .L038		;  counter1  =  counter1  +  1
   1892  f512
   1893  f512		       e6 da		      INC	counter1
   1894  f514				   .L039		;  if perrovidas  >  0 then gosub caidauno
   1895  f514
   1896  f514		       a9 00		      LDA	#0
   1897  f516		       c5 d9		      CMP	perrovidas
   1898  f518		       b0 03		      BCS	.skipL039
   1899  f51a				   .condpart0
   1900  f51a		       20 21 f6 	      jsr	.caidauno
   1901  f51d
   1902  f51d				   .skipL039
   1903  f51d				   .
   1904  f51d							;
   1905  f51d
   1906  f51d				   .L040		;  counter2  =  counter2  +  1
   1907  f51d
   1908  f51d		       e6 db		      INC	counter2
   1909  f51f				   .L041		;  if perrovidas  >  0 then gosub caidados
   1910  f51f
   1911  f51f		       a9 00		      LDA	#0
   1912  f521		       c5 d9		      CMP	perrovidas
   1913  f523		       b0 03		      BCS	.skipL041
   1914  f525				   .condpart1
   1915  f525		       20 57 f6 	      jsr	.caidados
   1916  f528
   1917  f528				   .skipL041
   1918  f528				   .
   1919  f528							;
   1920  f528
   1921  f528				   .L042		;  if player0y  =  104 then player0y  =  0  :	perrovidas  =  perrovidas  -  1
   1922  f528
   1923  f528		       a5 85		      LDA	player0y
   1924  f52a		       c9 68		      CMP	#104
   1925  f52c		       d0 06		      BNE	.skipL042
   1926  f52e				   .condpart2
   1927  f52e		       a9 00		      LDA	#0
   1928  f530		       85 85		      STA	player0y
   1929  f532		       c6 d9		      DEC	perrovidas
   1930  f534				   .skipL042
   1931  f534				   .
   1932  f534							;
   1933  f534
   1934  f534				   .L043		;  if perrovidas  =  0 then COLUPF  =	52  :  gosub limpiarpantalla
   1935  f534
   1936  f534		       a5 d9		      LDA	perrovidas
   1937  f536		       c9 00		      CMP	#0
   1938  f538		       d0 07		      BNE	.skipL043
   1939  f53a				   .condpart3
   1940  f53a		       a9 34		      LDA	#52
   1941  f53c		       85 08		      STA	COLUPF
   1942  f53e		       20 5e f7 	      jsr	.limpiarpantalla
   1943  f541
   1944  f541				   .skipL043
   1945  f541				   .L044		;  if perrovidas  =  0 then gosub game
   1946  f541
   1947  f541		       a5 d9		      LDA	perrovidas
   1948  f543		       c9 00		      CMP	#0
   1949  f545		       d0 03		      BNE	.skipL044
   1950  f547				   .condpart4
   1951  f547		       20 df f7 	      jsr	.game
   1952  f54a
   1953  f54a				   .skipL044
   1954  f54a				   .L045		;  if perrovidas  =  0 then gosub over
   1955  f54a
   1956  f54a		       a5 d9		      LDA	perrovidas
   1957  f54c		       c9 00		      CMP	#0
   1958  f54e		       d0 03		      BNE	.skipL045
   1959  f550				   .condpart5
   1960  f550		       20 9c f9 	      jsr	.over
   1961  f553
   1962  f553				   .skipL045
   1963  f553				   .
   1964  f553							;
   1965  f553
   1966  f553				   .L046		;  if joy0left  &&  player0x  >  21  &&  perrovidas  >  0 then gosub moverizquierda
   1967  f553
   1968  f553		       2c 80 02 	      bit	SWCHA
   1969  f556		       70 0f		      BVS	.skipL046
   1970  f558				   .condpart6
   1971  f558		       a9 15		      LDA	#21
   1972  f55a		       c5 80		      CMP	player0x
   1973  f55c		       b0 09		      BCS	.skip6then
   1974  f55e				   .condpart7
   1975  f55e		       a9 00		      LDA	#0
   1976  f560		       c5 d9		      CMP	perrovidas
   1977  f562		       b0 03		      BCS	.skip7then
   1978  f564				   .condpart8
   1979  f564		       20 ec f5 	      jsr	.moverizquierda
   1980  f567
   1981  f567				   .skip7then
   1982  f567				   .skip6then
   1983  f567				   .skipL046
   1984  f567				   .L047		;  if joy0right  &&  player0x	<  133	&&  perrovidas	>  0 then gosub moverderecha
   1985  f567
   1986  f567		       2c 80 02 	      bit	SWCHA
   1987  f56a		       30 0f		      BMI	.skipL047
   1988  f56c				   .condpart9
   1989  f56c		       a5 80		      LDA	player0x
   1990  f56e		       c9 85		      CMP	#133
   1991  f570		       b0 09		      BCS	.skip9then
   1992  f572				   .condpart10
   1993  f572		       a9 00		      LDA	#0
   1994  f574		       c5 d9		      CMP	perrovidas
   1995  f576		       b0 03		      BCS	.skip10then
   1996  f578				   .condpart11
   1997  f578		       20 ff f5 	      jsr	.moverderecha
   1998  f57b
   1999  f57b				   .skip10then
   2000  f57b				   .skip9then
   2001  f57b				   .skipL047
   2002  f57b				   .L048		;  if joy0up  &&  perrosalto  =  0  &&  perrovidas  >	0  &&  collision(player0,missile0) then perrosalto  =  1
   2003  f57b
   2004  f57b		       a9 10		      lda	#$10
   2005  f57d		       2c 80 02 	      bit	SWCHA
   2006  f580		       d0 14		      BNE	.skipL048
   2007  f582				   .condpart12
   2008  f582		       a5 d4		      LDA	perrosalto
   2009  f584		       c9 00		      CMP	#0
   2010  f586		       d0 0e		      BNE	.skip12then
   2011  f588				   .condpart13
   2012  f588		       a9 00		      LDA	#0
   2013  f58a		       c5 d9		      CMP	perrovidas
   2014  f58c		       b0 08		      BCS	.skip13then
   2015  f58e				   .condpart14
   2016  f58e		       24 00		      bit	CXM0P
   2017  f590		       50 04		      BVC	.skip14then
   2018  f592				   .condpart15
   2019  f592		       a9 01		      LDA	#1
   2020  f594		       85 d4		      STA	perrosalto
   2021  f596				   .skip14then
   2022  f596				   .skip13then
   2023  f596				   .skip12then
   2024  f596				   .skipL048
   2025  f596				   .L049		;  if joy0up  &&  perrosalto  =  0  &&  perrovidas  >	0  &&  collision(player0,missile1) then perrosalto  =  1
   2026  f596
   2027  f596		       a9 10		      lda	#$10
   2028  f598		       2c 80 02 	      bit	SWCHA
   2029  f59b		       d0 14		      BNE	.skipL049
   2030  f59d				   .condpart16
   2031  f59d		       a5 d4		      LDA	perrosalto
   2032  f59f		       c9 00		      CMP	#0
   2033  f5a1		       d0 0e		      BNE	.skip16then
   2034  f5a3				   .condpart17
   2035  f5a3		       a9 00		      LDA	#0
   2036  f5a5		       c5 d9		      CMP	perrovidas
   2037  f5a7		       b0 08		      BCS	.skip17then
   2038  f5a9				   .condpart18
   2039  f5a9		       24 01		      bit	CXM1P
   2040  f5ab		       10 04		      BPL	.skip18then
   2041  f5ad				   .condpart19
   2042  f5ad		       a9 01		      LDA	#1
   2043  f5af		       85 d4		      STA	perrosalto
   2044  f5b1				   .skip18then
   2045  f5b1				   .skip17then
   2046  f5b1				   .skip16then
   2047  f5b1				   .skipL049
   2048  f5b1				   .
   2049  f5b1							;
   2050  f5b1
   2051  f5b1				   .L050		;  if perrosalto  >=  1 then gosub saltarsubida
   2052  f5b1
   2053  f5b1		       a5 d4		      LDA	perrosalto
   2054  f5b3		       c9 01		      CMP	#1
   2055  f5b5		       90 03		      BCC	.skipL050
   2056  f5b7				   .condpart20
   2057  f5b7		       20 12 f6 	      jsr	.saltarsubida
   2058  f5ba
   2059  f5ba				   .skipL050
   2060  f5ba				   .
   2061  f5ba							;
   2062  f5ba
   2063  f5ba				   .L051		;  if perrovidas  >  0  &&  perrosalto  =  0  &&  !collision(player0,missile0)  &&  !collision(player0,missile1) then player0y  =  player0y  +  1
   2064  f5ba
   2065  f5ba		       a9 00		      LDA	#0
   2066  f5bc		       c5 d9		      CMP	perrovidas
   2067  f5be		       b0 10		      BCS	.skipL051
   2068  f5c0				   .condpart21
   2069  f5c0		       a5 d4		      LDA	perrosalto
   2070  f5c2		       c9 00		      CMP	#0
   2071  f5c4		       d0 0a		      BNE	.skip21then
   2072  f5c6				   .condpart22
   2073  f5c6		       24 00		      bit	CXM0P
   2074  f5c8		       70 06		      BVS	.skip22then
   2075  f5ca				   .condpart23
   2076  f5ca		       24 01		      bit	CXM1P
   2077  f5cc		       30 02		      BMI	.skip23then
   2078  f5ce				   .condpart24
   2079  f5ce		       e6 85		      INC	player0y
   2080  f5d0				   .skip23then
   2081  f5d0				   .skip22then
   2082  f5d0				   .skip21then
   2083  f5d0				   .skipL051
   2084  f5d0				   .
   2085  f5d0							;
   2086  f5d0
   2087  f5d0				   .L052		;  gosub premio
   2088  f5d0
   2089  f5d0		       20 8d f6 	      jsr	.premio
   2090  f5d3
   2091  f5d3				   .
   2092  f5d3							;
   2093  f5d3
   2094  f5d3				   .L053		;  gosub marcador
   2095  f5d3
   2096  f5d3		       20 cf f6 	      jsr	.marcador
   2097  f5d6
   2098  f5d6				   .
   2099  f5d6							;
   2100  f5d6
   2101  f5d6				   .L054		;  NUSIZ0  =  $30
   2102  f5d6
   2103  f5d6		       a9 30		      LDA	#$30
   2104  f5d8		       85 04		      STA	NUSIZ0
   2105  f5da				   .L055		;  missile0height  =  16
   2106  f5da
   2107  f5da		       a9 10		      LDA	#16
   2108  f5dc		       85 90		      STA	missile0height
   2109  f5de				   .
   2110  f5de							;
   2111  f5de
   2112  f5de				   .L056		;  NUSIZ1  =  $30
   2113  f5de
   2114  f5de		       a9 30		      LDA	#$30
   2115  f5e0		       85 05		      STA	NUSIZ1
   2116  f5e2				   .L057		;  missile1height  =  16
   2117  f5e2
   2118  f5e2		       a9 10		      LDA	#16
   2119  f5e4		       85 87		      STA	missile1height
   2120  f5e6				   .
   2121  f5e6							;
   2122  f5e6
   2123  f5e6				   .L058		;  drawscreen
   2124  f5e6
   2125  f5e6		       20 bd f3 	      jsr	drawscreen
   2126  f5e9				   .L059		;  goto mainloop
   2127  f5e9
   2128  f5e9		       4c 06 f5 	      jmp	.mainloop
   2129  f5ec
   2130  f5ec				   .
   2131  f5ec							;
   2132  f5ec
   2133  f5ec				   .moverizquierda
   2134  f5ec							; moverizquierda
   2135  f5ec
   2136  f5ec				   .L060		;  player0:
   2137  f5ec
   2138  f5ec		       a2 34		      LDX	#<playerL060_0
   2139  f5ee		       86 8a		      STX	player0pointerlo
   2140  f5f0		       a9 fb		      LDA	#>playerL060_0
   2141  f5f2		       85 8b		      STA	player0pointerhi
   2142  f5f4		       a9 07		      LDA	#7
   2143  f5f6		       85 8e		      STA	player0height
   2144  f5f8				   .L061		;  perrodireccion  =  2
   2145  f5f8
   2146  f5f8		       a9 02		      LDA	#2
   2147  f5fa		       85 d8		      STA	perrodireccion
   2148  f5fc				   .L062		;  player0x  =  player0x  -  1
   2149  f5fc
   2150  f5fc		       c6 80		      DEC	player0x
   2151  f5fe				   .L063		;  return
   2152  f5fe
   2153  f5fe		       60		      RTS
   2154  f5ff				   .
   2155  f5ff							;
   2156  f5ff
   2157  f5ff				   .moverderecha
   2158  f5ff							; moverderecha
   2159  f5ff
   2160  f5ff				   .L064		;  player0:
   2161  f5ff
   2162  f5ff		       a2 3c		      LDX	#<playerL064_0
   2163  f601		       86 8a		      STX	player0pointerlo
   2164  f603		       a9 fb		      LDA	#>playerL064_0
   2165  f605		       85 8b		      STA	player0pointerhi
   2166  f607		       a9 07		      LDA	#7
   2167  f609		       85 8e		      STA	player0height
   2168  f60b				   .L065		;  player0x  =  player0x  +  1
   2169  f60b
   2170  f60b		       e6 80		      INC	player0x
   2171  f60d				   .L066		;  perrodireccion  =  1
   2172  f60d
   2173  f60d		       a9 01		      LDA	#1
   2174  f60f		       85 d8		      STA	perrodireccion
   2175  f611				   .L067		;  return
   2176  f611
   2177  f611		       60		      RTS
   2178  f612				   .
   2179  f612							;
   2180  f612
   2181  f612				   .saltarsubida
   2182  f612							; saltarsubida
   2183  f612
   2184  f612				   .L068		;  player0y  =  player0y  -  1
   2185  f612
   2186  f612		       c6 85		      DEC	player0y
   2187  f614				   .L069		;  perrosalto	=  perrosalto  +  1
   2188  f614
   2189  f614		       e6 d4		      INC	perrosalto
   2190  f616				   .L070		;  if perrosalto  =  60 then perrosalto  =  0
   2191  f616
   2192  f616		       a5 d4		      LDA	perrosalto
   2193  f618		       c9 3c		      CMP	#60
   2194  f61a		       d0 04		      BNE	.skipL070
   2195  f61c				   .condpart25
   2196  f61c		       a9 00		      LDA	#0
   2197  f61e		       85 d4		      STA	perrosalto
   2198  f620				   .skipL070
   2199  f620				   .L071		;  return
   2200  f620
   2201  f620		       60		      RTS
   2202  f621				   .
   2203  f621							;
   2204  f621
   2205  f621				   .caidauno
   2206  f621							; caidauno
   2207  f621
   2208  f621				   .L072		;  if counter1  =  missile0vel then missile0y	=  missile0y  +  1  :  counter1  =  0
   2209  f621
   2210  f621		       a5 da		      LDA	counter1
   2211  f623		       c5 d5		      CMP	missile0vel
   2212  f625		       d0 06		      BNE	.skipL072
   2213  f627				   .condpart26
   2214  f627		       e6 91		      INC	missile0y
   2215  f629		       a9 00		      LDA	#0
   2216  f62b		       85 da		      STA	counter1
   2217  f62d				   .skipL072
   2218  f62d				   .L073		;  if missile0y  =  104 then missile0y  =  0  :  missile0vel  =   ( rand  &  1 )   +  2  :  score  =  score  +  10
   2219  f62d
   2220  f62d		       a5 91		      LDA	missile0y
   2221  f62f		       c9 68		      CMP	#104
   2222  f631		       d0 23		      BNE	.skipL073
   2223  f633				   .condpart27
   2224  f633		       a9 00		      LDA	#0
   2225  f635		       85 91		      STA	missile0y
   2226  f637							; complex statement detected
   2227  f637		       20 b3 f3 	      jsr	randomize
   2228  f63a		       29 01		      AND	#1
   2229  f63c		       18		      CLC
   2230  f63d		       69 02		      ADC	#2
   2231  f63f		       85 d5		      STA	missile0vel
   2232  f641		       f8		      SED
   2233  f642		       18		      CLC
   2234  f643		       a5 95		      LDA	score+2
   2235  f645		       69 10		      ADC	#$10
   2236  f647		       85 95		      STA	score+2
   2237  f649		       a5 94		      LDA	score+1
   2238  f64b		       69 00		      ADC	#$00
   2239  f64d		       85 94		      STA	score+1
   2240  f64f		       a5 93		      LDA	score
   2241  f651		       69 00		      ADC	#$00
   2242  f653		       85 93		      STA	score
   2243  f655		       d8		      CLD
   2244  f656				   .skipL073
   2245  f656				   .L074		;  return
   2246  f656
   2247  f656		       60		      RTS
   2248  f657				   .
   2249  f657							;
   2250  f657
   2251  f657				   .caidados
   2252  f657							; caidados
   2253  f657
   2254  f657				   .L075		;  if counter2  =  missile1vel then missile1y	=  missile1y  +  1  :  counter2  =  0
   2255  f657
   2256  f657		       a5 db		      LDA	counter2
   2257  f659		       c5 d6		      CMP	missile1vel
   2258  f65b		       d0 06		      BNE	.skipL075
   2259  f65d				   .condpart28
   2260  f65d		       e6 88		      INC	missile1y
   2261  f65f		       a9 00		      LDA	#0
   2262  f661		       85 db		      STA	counter2
   2263  f663				   .skipL075
   2264  f663				   .L076		;  if missile1y  =  104 then missile1y  =  0  :  missile1vel  =   ( rand  &  1 )   +  2  :  score  =  score  +  10
   2265  f663
   2266  f663		       a5 88		      LDA	missile1y
   2267  f665		       c9 68		      CMP	#104
   2268  f667		       d0 23		      BNE	.skipL076
   2269  f669				   .condpart29
   2270  f669		       a9 00		      LDA	#0
   2271  f66b		       85 88		      STA	missile1y
   2272  f66d							; complex statement detected
   2273  f66d		       20 b3 f3 	      jsr	randomize
   2274  f670		       29 01		      AND	#1
   2275  f672		       18		      CLC
   2276  f673		       69 02		      ADC	#2
   2277  f675		       85 d6		      STA	missile1vel
   2278  f677		       f8		      SED
   2279  f678		       18		      CLC
   2280  f679		       a5 95		      LDA	score+2
   2281  f67b		       69 10		      ADC	#$10
   2282  f67d		       85 95		      STA	score+2
   2283  f67f		       a5 94		      LDA	score+1
   2284  f681		       69 00		      ADC	#$00
   2285  f683		       85 94		      STA	score+1
   2286  f685		       a5 93		      LDA	score
   2287  f687		       69 00		      ADC	#$00
   2288  f689		       85 93		      STA	score
   2289  f68b		       d8		      CLD
   2290  f68c				   .skipL076
   2291  f68c				   .L077		;  return
   2292  f68c
   2293  f68c		       60		      RTS
   2294  f68d				   .
   2295  f68d							;
   2296  f68d
   2297  f68d				   .premio
   2298  f68d							; premio
   2299  f68d
   2300  f68d				   .L078		;  if ballstatus  =  0 then ballstatus  =  1  :  ballx  =   ( rand  &	90 )   +  50  :  bally	=   ( rand  &  60 )   +  20
   2301  f68d
   2302  f68d		       a5 dc		      LDA	ballstatus
   2303  f68f		       c9 00		      CMP	#0
   2304  f691		       d0 18		      BNE	.skipL078
   2305  f693				   .condpart30
   2306  f693		       a9 01		      LDA	#1
   2307  f695		       85 dc		      STA	ballstatus
   2308  f697							; complex statement detected
   2309  f697		       20 b3 f3 	      jsr	randomize
   2310  f69a		       29 5a		      AND	#90
   2311  f69c		       18		      CLC
   2312  f69d		       69 32		      ADC	#50
   2313  f69f		       85 84		      STA	ballx
   2314  f6a1							; complex statement detected
   2315  f6a1		       20 b3 f3 	      jsr	randomize
   2316  f6a4		       29 3c		      AND	#60
   2317  f6a6		       18		      CLC
   2318  f6a7		       69 14		      ADC	#20
   2319  f6a9		       85 89		      STA	bally
   2320  f6ab				   .skipL078
   2321  f6ab				   .L079		;  if collision(player0,ball)	&&  ballstatus	=  1 then score  =  score  +  500  :  ballstatus  =  0	:  ballx  =  0	:  bally  =  0	:  perrovidas  =  perrovidas  +  1
   2322  f6ab
   2323  f6ab		       24 02		      bit	CXP0FB
   2324  f6ad		       50 1f		      BVC	.skipL079
   2325  f6af				   .condpart31
   2326  f6af		       a5 dc		      LDA	ballstatus
   2327  f6b1		       c9 01		      CMP	#1
   2328  f6b3		       d0 19		      BNE	.skip31then
   2329  f6b5				   .condpart32
   2330  f6b5		       f8		      SED
   2331  f6b6		       18		      CLC
   2332  f6b7		       a5 94		      LDA	score+1
   2333  f6b9		       69 05		      ADC	#$05
   2334  f6bb		       85 94		      STA	score+1
   2335  f6bd		       a5 93		      LDA	score
   2336  f6bf		       69 00		      ADC	#$00
   2337  f6c1		       85 93		      STA	score
   2338  f6c3		       d8		      CLD
   2339  f6c4		       a9 00		      LDA	#0
   2340  f6c6		       85 dc		      STA	ballstatus
   2341  f6c8		       85 84		      STA	ballx
   2342  f6ca		       85 89		      STA	bally
   2343  f6cc		       e6 d9		      INC	perrovidas
   2344  f6ce				   .skip31then
   2345  f6ce				   .skipL079
   2346  f6ce				   .L080		;  return
   2347  f6ce
   2348  f6ce		       60		      RTS
   2349  f6cf				   .
   2350  f6cf							;
   2351  f6cf
   2352  f6cf				   .marcador
   2353  f6cf							; marcador
   2354  f6cf
   2355  f6cf				   .L081		;  if perrovidas  >  3 then perrovidas  =  3
   2356  f6cf
   2357  f6cf		       a9 03		      LDA	#3
   2358  f6d1		       c5 d9		      CMP	perrovidas
   2359  f6d3		       b0 04		      BCS	.skipL081
   2360  f6d5				   .condpart33
   2361  f6d5		       a9 03		      LDA	#3
   2362  f6d7		       85 d9		      STA	perrovidas
   2363  f6d9				   .skipL081
   2364  f6d9				   .L082		;  if perrovidas  =  3 then pfpixel 1 1 on  :	pfpixel 3 1 on	:  pfpixel 5 1 on
   2365  f6d9
   2366  f6d9		       a5 d9		      LDA	perrovidas
   2367  f6db		       c9 03		      CMP	#3
   2368  f6dd		       d0 1b		      BNE	.skipL082
   2369  f6df				   .condpart34
   2370  f6df		       a2 00		      LDX	#0
   2371  f6e1		       a0 01		      LDY	#1
   2372  f6e3		       a9 01		      LDA	#1
   2373  f6e5		       20 78 f2 	      jsr	pfpixel
   2374  f6e8		       a2 00		      LDX	#0
   2375  f6ea		       a0 01		      LDY	#1
   2376  f6ec		       a9 03		      LDA	#3
   2377  f6ee		       20 78 f2 	      jsr	pfpixel
   2378  f6f1		       a2 00		      LDX	#0
   2379  f6f3		       a0 01		      LDY	#1
   2380  f6f5		       a9 05		      LDA	#5
   2381  f6f7		       20 78 f2 	      jsr	pfpixel
   2382  f6fa				   .skipL082
   2383  f6fa				   .L083		;  if perrovidas  =  2 then pfpixel 1 1 on  :	pfpixel 3 1 on	:  pfpixel 5 1 off
   2384  f6fa
   2385  f6fa		       a5 d9		      LDA	perrovidas
   2386  f6fc		       c9 02		      CMP	#2
   2387  f6fe		       d0 1b		      BNE	.skipL083
   2388  f700				   .condpart35
   2389  f700		       a2 00		      LDX	#0
   2390  f702		       a0 01		      LDY	#1
   2391  f704		       a9 01		      LDA	#1
   2392  f706		       20 78 f2 	      jsr	pfpixel
   2393  f709		       a2 00		      LDX	#0
   2394  f70b		       a0 01		      LDY	#1
   2395  f70d		       a9 03		      LDA	#3
   2396  f70f		       20 78 f2 	      jsr	pfpixel
   2397  f712		       a2 01		      LDX	#1
   2398  f714		       a0 01		      LDY	#1
   2399  f716		       a9 05		      LDA	#5
   2400  f718		       20 78 f2 	      jsr	pfpixel
   2401  f71b				   .skipL083
   2402  f71b				   .L084		;  if perrovidas  =  1 then pfpixel 1 1 on  :	pfpixel 3 1 off  :  pfpixel 5 1 off
   2403  f71b
   2404  f71b		       a5 d9		      LDA	perrovidas
   2405  f71d		       c9 01		      CMP	#1
   2406  f71f		       d0 1b		      BNE	.skipL084
   2407  f721				   .condpart36
   2408  f721		       a2 00		      LDX	#0
   2409  f723		       a0 01		      LDY	#1
   2410  f725		       a9 01		      LDA	#1
   2411  f727		       20 78 f2 	      jsr	pfpixel
   2412  f72a		       a2 01		      LDX	#1
   2413  f72c		       a0 01		      LDY	#1
   2414  f72e		       a9 03		      LDA	#3
   2415  f730		       20 78 f2 	      jsr	pfpixel
   2416  f733		       a2 01		      LDX	#1
   2417  f735		       a0 01		      LDY	#1
   2418  f737		       a9 05		      LDA	#5
   2419  f739		       20 78 f2 	      jsr	pfpixel
   2420  f73c				   .skipL084
   2421  f73c				   .L085		;  if perrovidas  =  0 then pfpixel 1 1 off  :  pfpixel 3 1 off  :  pfpixel 5 1 off
   2422  f73c
   2423  f73c		       a5 d9		      LDA	perrovidas
   2424  f73e		       c9 00		      CMP	#0
   2425  f740		       d0 1b		      BNE	.skipL085
   2426  f742				   .condpart37
   2427  f742		       a2 01		      LDX	#1
   2428  f744		       a0 01		      LDY	#1
   2429  f746		       a9 01		      LDA	#1
   2430  f748		       20 78 f2 	      jsr	pfpixel
   2431  f74b		       a2 01		      LDX	#1
   2432  f74d		       a0 01		      LDY	#1
   2433  f74f		       a9 03		      LDA	#3
   2434  f751		       20 78 f2 	      jsr	pfpixel
   2435  f754		       a2 01		      LDX	#1
   2436  f756		       a0 01		      LDY	#1
   2437  f758		       a9 05		      LDA	#5
   2438  f75a		       20 78 f2 	      jsr	pfpixel
   2439  f75d				   .skipL085
   2440  f75d				   .L086		;  return
   2441  f75d
   2442  f75d		       60		      RTS
   2443  f75e				   .
   2444  f75e							;
   2445  f75e
   2446  f75e				   .limpiarpantalla
   2447  f75e							; limpiarpantalla
   2448  f75e
   2449  f75e				   .L087		;  pfpixel 5 1 off
   2450  f75e
   2451  f75e		       a2 01		      LDX	#1
   2452  f760		       a0 01		      LDY	#1
   2453  f762		       a9 05		      LDA	#5
   2454  f764		       20 78 f2 	      jsr	pfpixel
   2455  f767				   .L088		;  pfpixel 3 1 off
   2456  f767
   2457  f767		       a2 01		      LDX	#1
   2458  f769		       a0 01		      LDY	#1
   2459  f76b		       a9 03		      LDA	#3
   2460  f76d		       20 78 f2 	      jsr	pfpixel
   2461  f770				   .L089		;  pfpixel 1 1 off
   2462  f770
   2463  f770		       a2 01		      LDX	#1
   2464  f772		       a0 01		      LDY	#1
   2465  f774		       a9 01		      LDA	#1
   2466  f776		       20 78 f2 	      jsr	pfpixel
   2467  f779				   .L090		;  pfpixel 22 1 off
   2468  f779
   2469  f779		       a2 01		      LDX	#1
   2470  f77b		       a0 01		      LDY	#1
   2471  f77d		       a9 16		      LDA	#22
   2472  f77f		       20 78 f2 	      jsr	pfpixel
   2473  f782				   .L091		;  pfpixel 23 1 off
   2474  f782
   2475  f782		       a2 01		      LDX	#1
   2476  f784		       a0 01		      LDY	#1
   2477  f786		       a9 17		      LDA	#23
   2478  f788		       20 78 f2 	      jsr	pfpixel
   2479  f78b				   .L092		;  pfpixel 24 1 off
   2480  f78b
   2481  f78b		       a2 01		      LDX	#1
   2482  f78d		       a0 01		      LDY	#1
   2483  f78f		       a9 18		      LDA	#24
   2484  f791		       20 78 f2 	      jsr	pfpixel
   2485  f794				   .L093		;  pfpixel 25 1 off
   2486  f794
   2487  f794		       a2 01		      LDX	#1
   2488  f796		       a0 01		      LDY	#1
   2489  f798		       a9 19		      LDA	#25
   2490  f79a		       20 78 f2 	      jsr	pfpixel
   2491  f79d				   .L094		;  pfpixel 26 1 off
   2492  f79d
   2493  f79d		       a2 01		      LDX	#1
   2494  f79f		       a0 01		      LDY	#1
   2495  f7a1		       a9 1a		      LDA	#26
   2496  f7a3		       20 78 f2 	      jsr	pfpixel
   2497  f7a6				   .L095		;  pfpixel 27 1 off
   2498  f7a6
   2499  f7a6		       a2 01		      LDX	#1
   2500  f7a8		       a0 01		      LDY	#1
   2501  f7aa		       a9 1b		      LDA	#27
   2502  f7ac		       20 78 f2 	      jsr	pfpixel
   2503  f7af				   .L096		;  pfpixel 28 1 off
   2504  f7af
   2505  f7af		       a2 01		      LDX	#1
   2506  f7b1		       a0 01		      LDY	#1
   2507  f7b3		       a9 1c		      LDA	#28
   2508  f7b5		       20 78 f2 	      jsr	pfpixel
   2509  f7b8				   .L097		;  pfpixel 29 1 off
   2510  f7b8
   2511  f7b8		       a2 01		      LDX	#1
   2512  f7ba		       a0 01		      LDY	#1
   2513  f7bc		       a9 1d		      LDA	#29
   2514  f7be		       20 78 f2 	      jsr	pfpixel
   2515  f7c1				   .L098		;  pfpixel 30 1 off
   2516  f7c1
   2517  f7c1		       a2 01		      LDX	#1
   2518  f7c3		       a0 01		      LDY	#1
   2519  f7c5		       a9 1e		      LDA	#30
   2520  f7c7		       20 78 f2 	      jsr	pfpixel
   2521  f7ca				   .L099		;  pfpixel 31 1 off
   2522  f7ca
   2523  f7ca		       a2 01		      LDX	#1
   2524  f7cc		       a0 01		      LDY	#1
   2525  f7ce		       a9 1f		      LDA	#31
   2526  f7d0		       20 78 f2 	      jsr	pfpixel
   2527  f7d3				   .L0100		;  drawscreen
   2528  f7d3
   2529  f7d3		       20 bd f3 	      jsr	drawscreen
   2530  f7d6				   .
   2531  f7d6							;
   2532  f7d6
   2533  f7d6				   .L0101		;  missile0y  =  0
   2534  f7d6
   2535  f7d6		       a9 00		      LDA	#0
   2536  f7d8		       85 91		      STA	missile0y
   2537  f7da				   .L0102		;  missile1y  =  0
   2538  f7da
   2539  f7da		       a9 00		      LDA	#0
   2540  f7dc		       85 88		      STA	missile1y
   2541  f7de				   .
   2542  f7de							;
   2543  f7de
   2544  f7de				   .L0103		;  return
   2545  f7de
   2546  f7de		       60		      RTS
   2547  f7df				   .
   2548  f7df							;
   2549  f7df
   2550  f7df				   .game
   2551  f7df							; game
   2552  f7df
   2553  f7df				   .L0104		;  pfpixel 6 0 on
   2554  f7df
   2555  f7df		       a2 00		      LDX	#0
   2556  f7e1		       a0 00		      LDY	#0
   2557  f7e3		       a9 06		      LDA	#6
   2558  f7e5		       20 78 f2 	      jsr	pfpixel
   2559  f7e8				   .L0105		;  pfpixel 7 0 on
   2560  f7e8
   2561  f7e8		       a2 00		      LDX	#0
   2562  f7ea		       a0 00		      LDY	#0
   2563  f7ec		       a9 07		      LDA	#7
   2564  f7ee		       20 78 f2 	      jsr	pfpixel
   2565  f7f1				   .L0106		;  pfpixel 8 0 on
   2566  f7f1
   2567  f7f1		       a2 00		      LDX	#0
   2568  f7f3		       a0 00		      LDY	#0
   2569  f7f5		       a9 08		      LDA	#8
   2570  f7f7		       20 78 f2 	      jsr	pfpixel
   2571  f7fa				   .L0107		;  pfpixel 11 0 on
   2572  f7fa
   2573  f7fa		       a2 00		      LDX	#0
   2574  f7fc		       a0 00		      LDY	#0
   2575  f7fe		       a9 0b		      LDA	#11
   2576  f800		       20 78 f2 	      jsr	pfpixel
   2577  f803				   .L0108		;  pfpixel 12 0 on
   2578  f803
   2579  f803		       a2 00		      LDX	#0
   2580  f805		       a0 00		      LDY	#0
   2581  f807		       a9 0c		      LDA	#12
   2582  f809		       20 78 f2 	      jsr	pfpixel
   2583  f80c				   .L0109		;  pfpixel 13 0 on
   2584  f80c
   2585  f80c		       a2 00		      LDX	#0
   2586  f80e		       a0 00		      LDY	#0
   2587  f810		       a9 0d		      LDA	#13
   2588  f812		       20 78 f2 	      jsr	pfpixel
   2589  f815				   .L0110		;  pfpixel 15 0 on
   2590  f815
   2591  f815		       a2 00		      LDX	#0
   2592  f817		       a0 00		      LDY	#0
   2593  f819		       a9 0f		      LDA	#15
   2594  f81b		       20 78 f2 	      jsr	pfpixel
   2595  f81e				   .L0111		;  pfpixel 19 0 on
   2596  f81e
   2597  f81e		       a2 00		      LDX	#0
   2598  f820		       a0 00		      LDY	#0
   2599  f822		       a9 13		      LDA	#19
   2600  f824		       20 78 f2 	      jsr	pfpixel
   2601  f827				   .L0112		;  pfpixel 21 0 on
   2602  f827
   2603  f827		       a2 00		      LDX	#0
   2604  f829		       a0 00		      LDY	#0
   2605  f82b		       a9 15		      LDA	#21
   2606  f82d		       20 78 f2 	      jsr	pfpixel
   2607  f830				   .L0113		;  pfpixel 22 0 on
   2608  f830
   2609  f830		       a2 00		      LDX	#0
   2610  f832		       a0 00		      LDY	#0
   2611  f834		       a9 16		      LDA	#22
   2612  f836		       20 78 f2 	      jsr	pfpixel
   2613  f839				   .L0114		;  pfpixel 23 0 on
   2614  f839
   2615  f839		       a2 00		      LDX	#0
   2616  f83b		       a0 00		      LDY	#0
   2617  f83d		       a9 17		      LDA	#23
   2618  f83f		       20 78 f2 	      jsr	pfpixel
   2619  f842				   .L0115		;  pfpixel 24 0 on
   2620  f842
   2621  f842		       a2 00		      LDX	#0
   2622  f844		       a0 00		      LDY	#0
   2623  f846		       a9 18		      LDA	#24
   2624  f848		       20 78 f2 	      jsr	pfpixel
   2625  f84b				   .
   2626  f84b							;
   2627  f84b
   2628  f84b				   .L0116		;  pfpixel 5 1 on
   2629  f84b
   2630  f84b		       a2 00		      LDX	#0
   2631  f84d		       a0 01		      LDY	#1
   2632  f84f		       a9 05		      LDA	#5
   2633  f851		       20 78 f2 	      jsr	pfpixel
   2634  f854				   .L0117		;  pfpixel 10 1 on
   2635  f854
   2636  f854		       a2 00		      LDX	#0
   2637  f856		       a0 01		      LDY	#1
   2638  f858		       a9 0a		      LDA	#10
   2639  f85a		       20 78 f2 	      jsr	pfpixel
   2640  f85d				   .L0118		;  pfpixel 13 1 on
   2641  f85d
   2642  f85d		       a2 00		      LDX	#0
   2643  f85f		       a0 01		      LDY	#1
   2644  f861		       a9 0d		      LDA	#13
   2645  f863		       20 78 f2 	      jsr	pfpixel
   2646  f866				   .L0119		;  pfpixel 15 1 on
   2647  f866
   2648  f866		       a2 00		      LDX	#0
   2649  f868		       a0 01		      LDY	#1
   2650  f86a		       a9 0f		      LDA	#15
   2651  f86c		       20 78 f2 	      jsr	pfpixel
   2652  f86f				   .L0120		;  pfpixel 16 1 on
   2653  f86f
   2654  f86f		       a2 00		      LDX	#0
   2655  f871		       a0 01		      LDY	#1
   2656  f873		       a9 10		      LDA	#16
   2657  f875		       20 78 f2 	      jsr	pfpixel
   2658  f878				   .L0121		;  pfpixel 18 1 on
   2659  f878
   2660  f878		       a2 00		      LDX	#0
   2661  f87a		       a0 01		      LDY	#1
   2662  f87c		       a9 12		      LDA	#18
   2663  f87e		       20 78 f2 	      jsr	pfpixel
   2664  f881				   .L0122		;  pfpixel 19 1 on
   2665  f881
   2666  f881		       a2 00		      LDX	#0
   2667  f883		       a0 01		      LDY	#1
   2668  f885		       a9 13		      LDA	#19
   2669  f887		       20 78 f2 	      jsr	pfpixel
   2670  f88a				   .L0123		;  pfpixel 21 1 on
   2671  f88a
   2672  f88a		       a2 00		      LDX	#0
   2673  f88c		       a0 01		      LDY	#1
   2674  f88e		       a9 15		      LDA	#21
   2675  f890		       20 78 f2 	      jsr	pfpixel
   2676  f893				   .
   2677  f893							;
   2678  f893
   2679  f893				   .L0124		;  pfpixel 5 2 on
   2680  f893
   2681  f893		       a2 00		      LDX	#0
   2682  f895		       a0 02		      LDY	#2
   2683  f897		       a9 05		      LDA	#5
   2684  f899		       20 78 f2 	      jsr	pfpixel
   2685  f89c				   .L0125		;  pfpixel 7 2 on
   2686  f89c
   2687  f89c		       a2 00		      LDX	#0
   2688  f89e		       a0 02		      LDY	#2
   2689  f8a0		       a9 07		      LDA	#7
   2690  f8a2		       20 78 f2 	      jsr	pfpixel
   2691  f8a5				   .L0126		;  pfpixel 8 2 on
   2692  f8a5
   2693  f8a5		       a2 00		      LDX	#0
   2694  f8a7		       a0 02		      LDY	#2
   2695  f8a9		       a9 08		      LDA	#8
   2696  f8ab		       20 78 f2 	      jsr	pfpixel
   2697  f8ae				   .L0127		;  pfpixel 10 2 on
   2698  f8ae
   2699  f8ae		       a2 00		      LDX	#0
   2700  f8b0		       a0 02		      LDY	#2
   2701  f8b2		       a9 0a		      LDA	#10
   2702  f8b4		       20 78 f2 	      jsr	pfpixel
   2703  f8b7				   .L0128		;  pfpixel 13 2 on
   2704  f8b7
   2705  f8b7		       a2 00		      LDX	#0
   2706  f8b9		       a0 02		      LDY	#2
   2707  f8bb		       a9 0d		      LDA	#13
   2708  f8bd		       20 78 f2 	      jsr	pfpixel
   2709  f8c0				   .L0129		;  pfpixel 15 2 on
   2710  f8c0
   2711  f8c0		       a2 00		      LDX	#0
   2712  f8c2		       a0 02		      LDY	#2
   2713  f8c4		       a9 0f		      LDA	#15
   2714  f8c6		       20 78 f2 	      jsr	pfpixel
   2715  f8c9				   .L0130		;  pfpixel 17 2 on
   2716  f8c9
   2717  f8c9		       a2 00		      LDX	#0
   2718  f8cb		       a0 02		      LDY	#2
   2719  f8cd		       a9 11		      LDA	#17
   2720  f8cf		       20 78 f2 	      jsr	pfpixel
   2721  f8d2				   .L0131		;  pfpixel 19 2 on
   2722  f8d2
   2723  f8d2		       a2 00		      LDX	#0
   2724  f8d4		       a0 02		      LDY	#2
   2725  f8d6		       a9 13		      LDA	#19
   2726  f8d8		       20 78 f2 	      jsr	pfpixel
   2727  f8db				   .L0132		;  pfpixel 21 2 on
   2728  f8db
   2729  f8db		       a2 00		      LDX	#0
   2730  f8dd		       a0 02		      LDY	#2
   2731  f8df		       a9 15		      LDA	#21
   2732  f8e1		       20 78 f2 	      jsr	pfpixel
   2733  f8e4				   .L0133		;  pfpixel 22 2 on
   2734  f8e4
   2735  f8e4		       a2 00		      LDX	#0
   2736  f8e6		       a0 02		      LDY	#2
   2737  f8e8		       a9 16		      LDA	#22
   2738  f8ea		       20 78 f2 	      jsr	pfpixel
   2739  f8ed				   .
   2740  f8ed							;
   2741  f8ed
   2742  f8ed				   .L0134		;  pfpixel 5 3 on
   2743  f8ed
   2744  f8ed		       a2 00		      LDX	#0
   2745  f8ef		       a0 03		      LDY	#3
   2746  f8f1		       a9 05		      LDA	#5
   2747  f8f3		       20 78 f2 	      jsr	pfpixel
   2748  f8f6				   .L0135		;  pfpixel 8 3 on
   2749  f8f6
   2750  f8f6		       a2 00		      LDX	#0
   2751  f8f8		       a0 03		      LDY	#3
   2752  f8fa		       a9 08		      LDA	#8
   2753  f8fc		       20 78 f2 	      jsr	pfpixel
   2754  f8ff				   .L0136		;  pfpixel 10 3 on
   2755  f8ff
   2756  f8ff		       a2 00		      LDX	#0
   2757  f901		       a0 03		      LDY	#3
   2758  f903		       a9 0a		      LDA	#10
   2759  f905		       20 78 f2 	      jsr	pfpixel
   2760  f908				   .L0137		;  pfpixel 11 3 on
   2761  f908
   2762  f908		       a2 00		      LDX	#0
   2763  f90a		       a0 03		      LDY	#3
   2764  f90c		       a9 0b		      LDA	#11
   2765  f90e		       20 78 f2 	      jsr	pfpixel
   2766  f911				   .L0138		;  pfpixel 12 3 on
   2767  f911
   2768  f911		       a2 00		      LDX	#0
   2769  f913		       a0 03		      LDY	#3
   2770  f915		       a9 0c		      LDA	#12
   2771  f917		       20 78 f2 	      jsr	pfpixel
   2772  f91a				   .L0139		;  pfpixel 13 3 on
   2773  f91a
   2774  f91a		       a2 00		      LDX	#0
   2775  f91c		       a0 03		      LDY	#3
   2776  f91e		       a9 0d		      LDA	#13
   2777  f920		       20 78 f2 	      jsr	pfpixel
   2778  f923				   .L0140		;  pfpixel 15 3 on
   2779  f923
   2780  f923		       a2 00		      LDX	#0
   2781  f925		       a0 03		      LDY	#3
   2782  f927		       a9 0f		      LDA	#15
   2783  f929		       20 78 f2 	      jsr	pfpixel
   2784  f92c				   .L0141		;  pfpixel 19 3 on
   2785  f92c
   2786  f92c		       a2 00		      LDX	#0
   2787  f92e		       a0 03		      LDY	#3
   2788  f930		       a9 13		      LDA	#19
   2789  f932		       20 78 f2 	      jsr	pfpixel
   2790  f935				   .L0142		;  pfpixel 21 3 on
   2791  f935
   2792  f935		       a2 00		      LDX	#0
   2793  f937		       a0 03		      LDY	#3
   2794  f939		       a9 15		      LDA	#21
   2795  f93b		       20 78 f2 	      jsr	pfpixel
   2796  f93e				   .
   2797  f93e							;
   2798  f93e
   2799  f93e				   .L0143		;  pfpixel 6 4 on
   2800  f93e
   2801  f93e		       a2 00		      LDX	#0
   2802  f940		       a0 04		      LDY	#4
   2803  f942		       a9 06		      LDA	#6
   2804  f944		       20 78 f2 	      jsr	pfpixel
   2805  f947				   .L0144		;  pfpixel 7 4 on
   2806  f947
   2807  f947		       a2 00		      LDX	#0
   2808  f949		       a0 04		      LDY	#4
   2809  f94b		       a9 07		      LDA	#7
   2810  f94d		       20 78 f2 	      jsr	pfpixel
   2811  f950				   .L0145		;  pfpixel 10 4 on
   2812  f950
   2813  f950		       a2 00		      LDX	#0
   2814  f952		       a0 04		      LDY	#4
   2815  f954		       a9 0a		      LDA	#10
   2816  f956		       20 78 f2 	      jsr	pfpixel
   2817  f959				   .L0146		;  pfpixel 13 4 on
   2818  f959
   2819  f959		       a2 00		      LDX	#0
   2820  f95b		       a0 04		      LDY	#4
   2821  f95d		       a9 0d		      LDA	#13
   2822  f95f		       20 78 f2 	      jsr	pfpixel
   2823  f962				   .L0147		;  pfpixel 15 4 on
   2824  f962
   2825  f962		       a2 00		      LDX	#0
   2826  f964		       a0 04		      LDY	#4
   2827  f966		       a9 0f		      LDA	#15
   2828  f968		       20 78 f2 	      jsr	pfpixel
   2829  f96b				   .L0148		;  pfpixel 19 4 on
   2830  f96b
   2831  f96b		       a2 00		      LDX	#0
   2832  f96d		       a0 04		      LDY	#4
   2833  f96f		       a9 13		      LDA	#19
   2834  f971		       20 78 f2 	      jsr	pfpixel
   2835  f974				   .L0149		;  pfpixel 21 4 on
   2836  f974
   2837  f974		       a2 00		      LDX	#0
   2838  f976		       a0 04		      LDY	#4
   2839  f978		       a9 15		      LDA	#21
   2840  f97a		       20 78 f2 	      jsr	pfpixel
   2841  f97d				   .L0150		;  pfpixel 22 4 on
   2842  f97d
   2843  f97d		       a2 00		      LDX	#0
   2844  f97f		       a0 04		      LDY	#4
   2845  f981		       a9 16		      LDA	#22
   2846  f983		       20 78 f2 	      jsr	pfpixel
   2847  f986				   .L0151		;  pfpixel 23 4 on
   2848  f986
   2849  f986		       a2 00		      LDX	#0
   2850  f988		       a0 04		      LDY	#4
   2851  f98a		       a9 17		      LDA	#23
   2852  f98c		       20 78 f2 	      jsr	pfpixel
   2853  f98f				   .L0152		;  pfpixel 24 4 on
   2854  f98f
   2855  f98f		       a2 00		      LDX	#0
   2856  f991		       a0 04		      LDY	#4
   2857  f993		       a9 18		      LDA	#24
   2858  f995		       20 78 f2 	      jsr	pfpixel
   2859  f998				   .L0153		;  drawscreen
   2860  f998
   2861  f998		       20 bd f3 	      jsr	drawscreen
   2862  f99b				   .L0154		;  return
   2863  f99b
   2864  f99b		       60		      RTS
   2865  f99c				   .
   2866  f99c							;
   2867  f99c
   2868  f99c				   .over
   2869  f99c							; over
   2870  f99c
   2871  f99c				   .L0155		;  pfpixel 6 6 on
   2872  f99c
   2873  f99c		       a2 00		      LDX	#0
   2874  f99e		       a0 06		      LDY	#6
   2875  f9a0		       a9 06		      LDA	#6
   2876  f9a2		       20 78 f2 	      jsr	pfpixel
   2877  f9a5				   .L0156		;  pfpixel 7 6 on
   2878  f9a5
   2879  f9a5		       a2 00		      LDX	#0
   2880  f9a7		       a0 06		      LDY	#6
   2881  f9a9		       a9 07		      LDA	#7
   2882  f9ab		       20 78 f2 	      jsr	pfpixel
   2883  f9ae				   .L0157		;  pfpixel 10 6 on
   2884  f9ae
   2885  f9ae		       a2 00		      LDX	#0
   2886  f9b0		       a0 06		      LDY	#6
   2887  f9b2		       a9 0a		      LDA	#10
   2888  f9b4		       20 78 f2 	      jsr	pfpixel
   2889  f9b7				   .L0158		;  pfpixel 14 6 on
   2890  f9b7
   2891  f9b7		       a2 00		      LDX	#0
   2892  f9b9		       a0 06		      LDY	#6
   2893  f9bb		       a9 0e		      LDA	#14
   2894  f9bd		       20 78 f2 	      jsr	pfpixel
   2895  f9c0				   .L0159		;  pfpixel 16 6 on
   2896  f9c0
   2897  f9c0		       a2 00		      LDX	#0
   2898  f9c2		       a0 06		      LDY	#6
   2899  f9c4		       a9 10		      LDA	#16
   2900  f9c6		       20 78 f2 	      jsr	pfpixel
   2901  f9c9				   .L0160		;  pfpixel 17 6 on
   2902  f9c9
   2903  f9c9		       a2 00		      LDX	#0
   2904  f9cb		       a0 06		      LDY	#6
   2905  f9cd		       a9 11		      LDA	#17
   2906  f9cf		       20 78 f2 	      jsr	pfpixel
   2907  f9d2				   .L0161		;  pfpixel 18 6 on
   2908  f9d2
   2909  f9d2		       a2 00		      LDX	#0
   2910  f9d4		       a0 06		      LDY	#6
   2911  f9d6		       a9 12		      LDA	#18
   2912  f9d8		       20 78 f2 	      jsr	pfpixel
   2913  f9db				   .L0162		;  pfpixel 19 6 on
   2914  f9db
   2915  f9db		       a2 00		      LDX	#0
   2916  f9dd		       a0 06		      LDY	#6
   2917  f9df		       a9 13		      LDA	#19
   2918  f9e1		       20 78 f2 	      jsr	pfpixel
   2919  f9e4				   .L0163		;  pfpixel 21 6 on
   2920  f9e4
   2921  f9e4		       a2 00		      LDX	#0
   2922  f9e6		       a0 06		      LDY	#6
   2923  f9e8		       a9 15		      LDA	#21
   2924  f9ea		       20 78 f2 	      jsr	pfpixel
   2925  f9ed				   .L0164		;  pfpixel 22 6 on
   2926  f9ed
   2927  f9ed		       a2 00		      LDX	#0
   2928  f9ef		       a0 06		      LDY	#6
   2929  f9f1		       a9 16		      LDA	#22
   2930  f9f3		       20 78 f2 	      jsr	pfpixel
   2931  f9f6				   .L0165		;  pfpixel 23 6 on
   2932  f9f6
   2933  f9f6		       a2 00		      LDX	#0
   2934  f9f8		       a0 06		      LDY	#6
   2935  f9fa		       a9 17		      LDA	#23
   2936  f9fc		       20 78 f2 	      jsr	pfpixel
   2937  f9ff				   .L0166		;  pfpixel 24 6 on
   2938  f9ff
   2939  f9ff		       a2 00		      LDX	#0
   2940  fa01		       a0 06		      LDY	#6
   2941  fa03		       a9 18		      LDA	#24
   2942  fa05		       20 78 f2 	      jsr	pfpixel
   2943  fa08				   .
   2944  fa08							;
   2945  fa08
   2946  fa08				   .L0167		;  pfpixel 5 7 on
   2947  fa08
   2948  fa08		       a2 00		      LDX	#0
   2949  fa0a		       a0 07		      LDY	#7
   2950  fa0c		       a9 05		      LDA	#5
   2951  fa0e		       20 78 f2 	      jsr	pfpixel
   2952  fa11				   .L0168		;  pfpixel 8 7 on
   2953  fa11
   2954  fa11		       a2 00		      LDX	#0
   2955  fa13		       a0 07		      LDY	#7
   2956  fa15		       a9 08		      LDA	#8
   2957  fa17		       20 78 f2 	      jsr	pfpixel
   2958  fa1a				   .L0169		;  pfpixel 10 7 on
   2959  fa1a
   2960  fa1a		       a2 00		      LDX	#0
   2961  fa1c		       a0 07		      LDY	#7
   2962  fa1e		       a9 0a		      LDA	#10
   2963  fa20		       20 78 f2 	      jsr	pfpixel
   2964  fa23				   .L0170		;  pfpixel 14 7 on
   2965  fa23
   2966  fa23		       a2 00		      LDX	#0
   2967  fa25		       a0 07		      LDY	#7
   2968  fa27		       a9 0e		      LDA	#14
   2969  fa29		       20 78 f2 	      jsr	pfpixel
   2970  fa2c				   .L0171		;  pfpixel 16 7 on
   2971  fa2c
   2972  fa2c		       a2 00		      LDX	#0
   2973  fa2e		       a0 07		      LDY	#7
   2974  fa30		       a9 10		      LDA	#16
   2975  fa32		       20 78 f2 	      jsr	pfpixel
   2976  fa35				   .L0172		;  pfpixel 21 7 on
   2977  fa35
   2978  fa35		       a2 00		      LDX	#0
   2979  fa37		       a0 07		      LDY	#7
   2980  fa39		       a9 15		      LDA	#21
   2981  fa3b		       20 78 f2 	      jsr	pfpixel
   2982  fa3e				   .L0173		;  pfpixel 24 7 on
   2983  fa3e
   2984  fa3e		       a2 00		      LDX	#0
   2985  fa40		       a0 07		      LDY	#7
   2986  fa42		       a9 18		      LDA	#24
   2987  fa44		       20 78 f2 	      jsr	pfpixel
   2988  fa47				   .
   2989  fa47							;
   2990  fa47
   2991  fa47				   .L0174		;  pfpixel 5 8 on
   2992  fa47
   2993  fa47		       a2 00		      LDX	#0
   2994  fa49		       a0 08		      LDY	#8
   2995  fa4b		       a9 05		      LDA	#5
   2996  fa4d		       20 78 f2 	      jsr	pfpixel
   2997  fa50				   .L0175		;  pfpixel 8 8 on
   2998  fa50
   2999  fa50		       a2 00		      LDX	#0
   3000  fa52		       a0 08		      LDY	#8
   3001  fa54		       a9 08		      LDA	#8
   3002  fa56		       20 78 f2 	      jsr	pfpixel
   3003  fa59				   .L0176		;  pfpixel 10 8 on
   3004  fa59
   3005  fa59		       a2 00		      LDX	#0
   3006  fa5b		       a0 08		      LDY	#8
   3007  fa5d		       a9 0a		      LDA	#10
   3008  fa5f		       20 78 f2 	      jsr	pfpixel
   3009  fa62				   .L0177		;  pfpixel 14 8 on
   3010  fa62
   3011  fa62		       a2 00		      LDX	#0
   3012  fa64		       a0 08		      LDY	#8
   3013  fa66		       a9 0e		      LDA	#14
   3014  fa68		       20 78 f2 	      jsr	pfpixel
   3015  fa6b				   .L0178		;  pfpixel 16 8 on
   3016  fa6b
   3017  fa6b		       a2 00		      LDX	#0
   3018  fa6d		       a0 08		      LDY	#8
   3019  fa6f		       a9 10		      LDA	#16
   3020  fa71		       20 78 f2 	      jsr	pfpixel
   3021  fa74				   .L0179		;  pfpixel 17 8 on
   3022  fa74
   3023  fa74		       a2 00		      LDX	#0
   3024  fa76		       a0 08		      LDY	#8
   3025  fa78		       a9 11		      LDA	#17
   3026  fa7a		       20 78 f2 	      jsr	pfpixel
   3027  fa7d				   .L0180		;  pfpixel 21 8 on
   3028  fa7d
   3029  fa7d		       a2 00		      LDX	#0
   3030  fa7f		       a0 08		      LDY	#8
   3031  fa81		       a9 15		      LDA	#21
   3032  fa83		       20 78 f2 	      jsr	pfpixel
   3033  fa86				   .L0181		;  pfpixel 22 8 on
   3034  fa86
   3035  fa86		       a2 00		      LDX	#0
   3036  fa88		       a0 08		      LDY	#8
   3037  fa8a		       a9 16		      LDA	#22
   3038  fa8c		       20 78 f2 	      jsr	pfpixel
   3039  fa8f				   .L0182		;  pfpixel 23 8 on
   3040  fa8f
   3041  fa8f		       a2 00		      LDX	#0
   3042  fa91		       a0 08		      LDY	#8
   3043  fa93		       a9 17		      LDA	#23
   3044  fa95		       20 78 f2 	      jsr	pfpixel
   3045  fa98				   .
   3046  fa98							;
   3047  fa98
   3048  fa98				   .L0183		;  pfpixel 5 9 on
   3049  fa98
   3050  fa98		       a2 00		      LDX	#0
   3051  fa9a		       a0 09		      LDY	#9
   3052  fa9c		       a9 05		      LDA	#5
   3053  fa9e		       20 78 f2 	      jsr	pfpixel
   3054  faa1				   .L0184		;  pfpixel 8 9 on
   3055  faa1
   3056  faa1		       a2 00		      LDX	#0
   3057  faa3		       a0 09		      LDY	#9
   3058  faa5		       a9 08		      LDA	#8
   3059  faa7		       20 78 f2 	      jsr	pfpixel
   3060  faaa				   .L0185		;  pfpixel 11 9 on
   3061  faaa
   3062  faaa		       a2 00		      LDX	#0
   3063  faac		       a0 09		      LDY	#9
   3064  faae		       a9 0b		      LDA	#11
   3065  fab0		       20 78 f2 	      jsr	pfpixel
   3066  fab3				   .L0186		;  pfpixel 13 9 on
   3067  fab3
   3068  fab3		       a2 00		      LDX	#0
   3069  fab5		       a0 09		      LDY	#9
   3070  fab7		       a9 0d		      LDA	#13
   3071  fab9		       20 78 f2 	      jsr	pfpixel
   3072  fabc				   .L0187		;  pfpixel 16 9 on
   3073  fabc
   3074  fabc		       a2 00		      LDX	#0
   3075  fabe		       a0 09		      LDY	#9
   3076  fac0		       a9 10		      LDA	#16
   3077  fac2		       20 78 f2 	      jsr	pfpixel
   3078  fac5				   .L0188		;  pfpixel 21 9 on
   3079  fac5
   3080  fac5		       a2 00		      LDX	#0
   3081  fac7		       a0 09		      LDY	#9
   3082  fac9		       a9 15		      LDA	#21
   3083  facb		       20 78 f2 	      jsr	pfpixel
   3084  face				   .L0189		;  pfpixel 23 9 on
   3085  face
   3086  face		       a2 00		      LDX	#0
   3087  fad0		       a0 09		      LDY	#9
   3088  fad2		       a9 17		      LDA	#23
   3089  fad4		       20 78 f2 	      jsr	pfpixel
   3090  fad7				   .
   3091  fad7							;
   3092  fad7
   3093  fad7				   .L0190		;  pfpixel 6 10 on
   3094  fad7
   3095  fad7		       a2 00		      LDX	#0
   3096  fad9		       a0 0a		      LDY	#10
   3097  fadb		       a9 06		      LDA	#6
   3098  fadd		       20 78 f2 	      jsr	pfpixel
   3099  fae0				   .L0191		;  pfpixel 7 10 on
   3100  fae0
   3101  fae0		       a2 00		      LDX	#0
   3102  fae2		       a0 0a		      LDY	#10
   3103  fae4		       a9 07		      LDA	#7
   3104  fae6		       20 78 f2 	      jsr	pfpixel
   3105  fae9				   .L0192		;  pfpixel 12 10 on
   3106  fae9
   3107  fae9		       a2 00		      LDX	#0
   3108  faeb		       a0 0a		      LDY	#10
   3109  faed		       a9 0c		      LDA	#12
   3110  faef		       20 78 f2 	      jsr	pfpixel
   3111  faf2				   .L0193		;  pfpixel 16 10 on
   3112  faf2
   3113  faf2		       a2 00		      LDX	#0
   3114  faf4		       a0 0a		      LDY	#10
   3115  faf6		       a9 10		      LDA	#16
   3116  faf8		       20 78 f2 	      jsr	pfpixel
   3117  fafb				   .L0194		;  pfpixel 17 10 on
   3118  fafb
   3119  fafb		       a2 00		      LDX	#0
   3120  fafd		       a0 0a		      LDY	#10
   3121  faff		       a9 11		      LDA	#17
   3122  fb01		       20 78 f2 	      jsr	pfpixel
   3123  fb04				   .L0195		;  pfpixel 18 10 on
   3124  fb04
   3125  fb04		       a2 00		      LDX	#0
   3126  fb06		       a0 0a		      LDY	#10
   3127  fb08		       a9 12		      LDA	#18
   3128  fb0a		       20 78 f2 	      jsr	pfpixel
   3129  fb0d				   .L0196		;  pfpixel 19 10 on
   3130  fb0d
   3131  fb0d		       a2 00		      LDX	#0
   3132  fb0f		       a0 0a		      LDY	#10
   3133  fb11		       a9 13		      LDA	#19
   3134  fb13		       20 78 f2 	      jsr	pfpixel
   3135  fb16				   .L0197		;  pfpixel 21 10 on
   3136  fb16
   3137  fb16		       a2 00		      LDX	#0
   3138  fb18		       a0 0a		      LDY	#10
   3139  fb1a		       a9 15		      LDA	#21
   3140  fb1c		       20 78 f2 	      jsr	pfpixel
   3141  fb1f				   .L0198		;  pfpixel 24 10 on
   3142  fb1f
   3143  fb1f		       a2 00		      LDX	#0
   3144  fb21		       a0 0a		      LDY	#10
   3145  fb23		       a9 18		      LDA	#24
   3146  fb25		       20 78 f2 	      jsr	pfpixel
   3147  fb28				   .L0199		;  drawscreen
   3148  fb28
   3149  fb28		       20 bd f3 	      jsr	drawscreen
   3150  fb2b				   .L0200		;  return
   3151  fb2b
   3152  fb2b		       60		      RTS
   3153  fb2c				   .
   3154  fb2c							;
   3155  fb2c
   3156  fb2c				  -	      if	(<*) > (<(*+7))
   3157  fb2c				  -	      repeat	($100-<*)
   3158  fb2c				  -	      .byte	0
   3159  fb2c				  -	      repend
   3160  fb2c					      endif
   3161  fb2c				   playerL02_0
   3162  fb2c		       44		      .byte.b	%01000100
   3163  fb2d		       44		      .byte.b	%01000100
   3164  fb2e		       7c		      .byte.b	%01111100
   3165  fb2f		       7c		      .byte.b	%01111100
   3166  fb30		       7c		      .byte.b	%01111100
   3167  fb31		       87		      .byte.b	%10000111
   3168  fb32		       07		      .byte.b	%00000111
   3169  fb33		       04		      .byte.b	%00000100
   3170  fb34				  -	      if	(<*) > (<(*+7))
   3171  fb34				  -	      repeat	($100-<*)
   3172  fb34				  -	      .byte	0
   3173  fb34				  -	      repend
   3174  fb34					      endif
   3175  fb34				   playerL060_0
   3176  fb34		       22		      .byte.b	%00100010
   3177  fb35		       22		      .byte.b	%00100010
   3178  fb36		       3e		      .byte.b	%00111110
   3179  fb37		       3e		      .byte.b	%00111110
   3180  fb38		       3f		      .byte.b	%00111111
   3181  fb39		       e0		      .byte.b	%11100000
   3182  fb3a		       e0		      .byte.b	%11100000
   3183  fb3b		       20		      .byte.b	%00100000
   3184  fb3c				  -	      if	(<*) > (<(*+7))
   3185  fb3c				  -	      repeat	($100-<*)
   3186  fb3c				  -	      .byte	0
   3187  fb3c				  -	      repend
   3188  fb3c					      endif
   3189  fb3c				   playerL064_0
   3190  fb3c		       44		      .byte.b	%01000100
   3191  fb3d		       44		      .byte.b	%01000100
   3192  fb3e		       7c		      .byte.b	%01111100
   3193  fb3f		       7c		      .byte.b	%01111100
   3194  fb40		       7c		      .byte.b	%01111100
   3195  fb41		       87		      .byte.b	%10000111
   3196  fb42		       07		      .byte.b	%00000111
   3197  fb43		       04		      .byte.b	%00000100
   3198  fb44					      if	ECHOFIRST
      1112 bytes of ROM space left
   3199  fb44					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3200  fb44					      endif
   3201  fb44		       00 01	   ECHOFIRST  =	1
   3202  fb44
   3203  fb44
   3204  fb44
   3205  fb44							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3206  fb44
   3207  fb44							; feel free to modify the score graphics - just keep each digit 8 high
   3208  fb44							; and keep the conditional compilation stuff intact
   3209  fb44				  -	      ifconst	ROM2k
   3210  fb44				  -	      ORG	$F7AC-8
   3211  fb44					      else
   3212  fb44				  -	      ifconst	bankswitch
   3213  fb44				  -	      if	bankswitch == 8
   3214  fb44				  -	      ORG	$2F94-bscode_length
   3215  fb44				  -	      RORG	$FF94-bscode_length
   3216  fb44				  -	      endif
   3217  fb44				  -	      if	bankswitch == 16
   3218  fb44				  -	      ORG	$4F94-bscode_length
   3219  fb44				  -	      RORG	$FF94-bscode_length
   3220  fb44				  -	      endif
   3221  fb44				  -	      if	bankswitch == 32
   3222  fb44				  -	      ORG	$8F94-bscode_length
   3223  fb44				  -	      RORG	$FF94-bscode_length
   3224  fb44				  -	      endif
   3225  fb44				  -	      if	bankswitch == 64
   3226  fb44				  -	      ORG	$10F80-bscode_length
   3227  fb44				  -	      RORG	$1FF80-bscode_length
   3228  fb44				  -	      endif
   3229  fb44					      else
   3230  ff9c					      ORG	$FF9C
   3231  ff9c					      endif
   3232  ff9c					      endif
   3233  ff9c
   3234  ff9c							; font equates
   3235  ff9c		       00 01	   .21stcentury =	1
   3236  ff9c		       00 02	   alarmclock =	2
   3237  ff9c		       00 03	   handwritten =	3
   3238  ff9c		       00 04	   interrupted =	4
   3239  ff9c		       00 05	   retroputer =	5
   3240  ff9c		       00 06	   whimsey    =	6
   3241  ff9c		       00 07	   tiny       =	7
   3242  ff9c		       00 08	   hex	      =	8
   3243  ff9c
   3244  ff9c				  -	      ifconst	font
   3245  ff9c				  -	      if	font == hex
   3246  ff9c				  -	      ORG	. - 48
   3247  ff9c				  -	      endif
   3248  ff9c					      endif
   3249  ff9c
   3250  ff9c				   scoretable
   3251  ff9c
   3252  ff9c				  -	      ifconst	font
   3253  ff9c				  -	      if	font == .21stcentury
   3254  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3255  ff9c				  -	      endif
   3256  ff9c				  -	      if	font == alarmclock
   3257  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3258  ff9c				  -	      endif
   3259  ff9c				  -	      if	font == handwritten
   3260  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3261  ff9c				  -	      endif
   3262  ff9c				  -	      if	font == interrupted
   3263  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3264  ff9c				  -	      endif
   3265  ff9c				  -	      if	font == retroputer
   3266  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3267  ff9c				  -	      endif
   3268  ff9c				  -	      if	font == whimsey
   3269  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3270  ff9c				  -	      endif
   3271  ff9c				  -	      if	font == tiny
   3272  ff9c				  -	      include	"score_graphics.asm.tiny"
   3273  ff9c				  -	      endif
   3274  ff9c				  -	      if	font == hex
   3275  ff9c				  -	      include	"score_graphics.asm.hex"
   3276  ff9c				  -	      endif
   3277  ff9c					      else		; default font
   3278  ff9c
   3279  ff9c		       3c		      .byte.b	%00111100
   3280  ff9d		       66		      .byte.b	%01100110
   3281  ff9e		       66		      .byte.b	%01100110
   3282  ff9f		       66		      .byte.b	%01100110
   3283  ffa0		       66		      .byte.b	%01100110
   3284  ffa1		       66		      .byte.b	%01100110
   3285  ffa2		       66		      .byte.b	%01100110
   3286  ffa3		       3c		      .byte.b	%00111100
   3287  ffa4
   3288  ffa4		       7e		      .byte.b	%01111110
   3289  ffa5		       18		      .byte.b	%00011000
   3290  ffa6		       18		      .byte.b	%00011000
   3291  ffa7		       18		      .byte.b	%00011000
   3292  ffa8		       18		      .byte.b	%00011000
   3293  ffa9		       38		      .byte.b	%00111000
   3294  ffaa		       18		      .byte.b	%00011000
   3295  ffab		       08		      .byte.b	%00001000
   3296  ffac
   3297  ffac		       7e		      .byte.b	%01111110
   3298  ffad		       60		      .byte.b	%01100000
   3299  ffae		       60		      .byte.b	%01100000
   3300  ffaf		       3c		      .byte.b	%00111100
   3301  ffb0		       06		      .byte.b	%00000110
   3302  ffb1		       06		      .byte.b	%00000110
   3303  ffb2		       46		      .byte.b	%01000110
   3304  ffb3		       3c		      .byte.b	%00111100
   3305  ffb4
   3306  ffb4		       3c		      .byte.b	%00111100
   3307  ffb5		       46		      .byte.b	%01000110
   3308  ffb6		       06		      .byte.b	%00000110
   3309  ffb7		       06		      .byte.b	%00000110
   3310  ffb8		       1c		      .byte.b	%00011100
   3311  ffb9		       06		      .byte.b	%00000110
   3312  ffba		       46		      .byte.b	%01000110
   3313  ffbb		       3c		      .byte.b	%00111100
   3314  ffbc
   3315  ffbc		       0c		      .byte.b	%00001100
   3316  ffbd		       0c		      .byte.b	%00001100
   3317  ffbe		       7e		      .byte.b	%01111110
   3318  ffbf		       4c		      .byte.b	%01001100
   3319  ffc0		       4c		      .byte.b	%01001100
   3320  ffc1		       2c		      .byte.b	%00101100
   3321  ffc2		       1c		      .byte.b	%00011100
   3322  ffc3		       0c		      .byte.b	%00001100
   3323  ffc4
   3324  ffc4		       3c		      .byte.b	%00111100
   3325  ffc5		       46		      .byte.b	%01000110
   3326  ffc6		       06		      .byte.b	%00000110
   3327  ffc7		       06		      .byte.b	%00000110
   3328  ffc8		       3c		      .byte.b	%00111100
   3329  ffc9		       60		      .byte.b	%01100000
   3330  ffca		       60		      .byte.b	%01100000
   3331  ffcb		       7e		      .byte.b	%01111110
   3332  ffcc
   3333  ffcc		       3c		      .byte.b	%00111100
   3334  ffcd		       66		      .byte.b	%01100110
   3335  ffce		       66		      .byte.b	%01100110
   3336  ffcf		       66		      .byte.b	%01100110
   3337  ffd0		       7c		      .byte.b	%01111100
   3338  ffd1		       60		      .byte.b	%01100000
   3339  ffd2		       62		      .byte.b	%01100010
   3340  ffd3		       3c		      .byte.b	%00111100
   3341  ffd4
   3342  ffd4		       30		      .byte.b	%00110000
   3343  ffd5		       30		      .byte.b	%00110000
   3344  ffd6		       30		      .byte.b	%00110000
   3345  ffd7		       18		      .byte.b	%00011000
   3346  ffd8		       0c		      .byte.b	%00001100
   3347  ffd9		       06		      .byte.b	%00000110
   3348  ffda		       42		      .byte.b	%01000010
   3349  ffdb		       3e		      .byte.b	%00111110
   3350  ffdc
   3351  ffdc		       3c		      .byte.b	%00111100
   3352  ffdd		       66		      .byte.b	%01100110
   3353  ffde		       66		      .byte.b	%01100110
   3354  ffdf		       66		      .byte.b	%01100110
   3355  ffe0		       3c		      .byte.b	%00111100
   3356  ffe1		       66		      .byte.b	%01100110
   3357  ffe2		       66		      .byte.b	%01100110
   3358  ffe3		       3c		      .byte.b	%00111100
   3359  ffe4
   3360  ffe4		       3c		      .byte.b	%00111100
   3361  ffe5		       46		      .byte.b	%01000110
   3362  ffe6		       06		      .byte.b	%00000110
   3363  ffe7		       3e		      .byte.b	%00111110
   3364  ffe8		       66		      .byte.b	%01100110
   3365  ffe9		       66		      .byte.b	%01100110
   3366  ffea		       66		      .byte.b	%01100110
   3367  ffeb		       3c		      .byte.b	%00111100
   3368  ffec
   3369  ffec					      ifnconst	DPC_kernel_options
   3370  ffec
   3371  ffec		       00		      .byte.b	%00000000
   3372  ffed		       00		      .byte.b	%00000000
   3373  ffee		       00		      .byte.b	%00000000
   3374  ffef		       00		      .byte.b	%00000000
   3375  fff0		       00		      .byte.b	%00000000
   3376  fff1		       00		      .byte.b	%00000000
   3377  fff2		       00		      .byte.b	%00000000
   3378  fff3		       00		      .byte.b	%00000000
   3379  fff4
   3380  fff4					      endif
   3381  fff4
   3382  fff4					      endif
   3383  fff4
   3384  fff4				  -	      ifconst	ROM2k
   3385  fff4				  -	      ORG	$F7FC
   3386  fff4					      else
   3387  fff4				  -	      ifconst	bankswitch
   3388  fff4				  -	      if	bankswitch == 8
   3389  fff4				  -	      ORG	$2FF4-bscode_length
   3390  fff4				  -	      RORG	$FFF4-bscode_length
   3391  fff4				  -	      endif
   3392  fff4				  -	      if	bankswitch == 16
   3393  fff4				  -	      ORG	$4FF4-bscode_length
   3394  fff4				  -	      RORG	$FFF4-bscode_length
   3395  fff4				  -	      endif
   3396  fff4				  -	      if	bankswitch == 32
   3397  fff4				  -	      ORG	$8FF4-bscode_length
   3398  fff4				  -	      RORG	$FFF4-bscode_length
   3399  fff4				  -	      endif
   3400  fff4				  -	      if	bankswitch == 64
   3401  fff4				  -	      ORG	$10FE0-bscode_length
   3402  fff4				  -	      RORG	$1FFE0-bscode_length
   3403  fff4				  -	      endif
   3404  fff4					      else
   3405  fffc					      ORG	$FFFC
   3406  fffc					      endif
   3407  fffc					      endif
   3408  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3409  fffc
   3410  fffc				  -	      ifconst	bankswitch
   3411  fffc				  -	      if	bankswitch == 8
   3412  fffc				  -	      ORG	$2FFC
   3413  fffc				  -	      RORG	$FFFC
   3414  fffc				  -	      endif
   3415  fffc				  -	      if	bankswitch == 16
   3416  fffc				  -	      ORG	$4FFC
   3417  fffc				  -	      RORG	$FFFC
   3418  fffc				  -	      endif
   3419  fffc				  -	      if	bankswitch == 32
   3420  fffc				  -	      ORG	$8FFC
   3421  fffc				  -	      RORG	$FFFC
   3422  fffc				  -	      endif
   3423  fffc				  -	      if	bankswitch == 64
   3424  fffc				  -	      ORG	$10FF0
   3425  fffc				  -	      RORG	$1FFF0
   3426  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3427  fffc				  -	      ORG	$10FF8
   3428  fffc				  -	      RORG	$1FFF8
   3429  fffc				  -	      ifconst	superchip
   3430  fffc				  -	      .byte	"E","F","S","C"
   3431  fffc				  -	      else
   3432  fffc				  -	      .byte	"E","F","E","F"
   3433  fffc				  -	      endif
   3434  fffc				  -	      ORG	$10FFC
   3435  fffc				  -	      RORG	$1FFFC
   3436  fffc				  -	      endif
   3437  fffc					      else
   3438  fffc				  -	      ifconst	ROM2k
   3439  fffc				  -	      ORG	$F7FC
   3440  fffc					      else
   3441  fffc					      ORG	$FFFC
   3442  fffc					      endif
   3443  fffc					      endif
   3444  fffc		       00 f0		      .word.w	(start & $ffff)
   3445  fffe		       00 f0		      .word.w	(start & $ffff)
